syntax = "proto3";

package flaap.v1alpha1;

option go_package = "github.com/jlewi/flaap/go/protos/v1alpha1";

message Metadata {
  string name = 1;
  map<string, string> labels = 2;
  string resourceVersion = 3;
}

enum StatusCondition {
    UNKNOWN = 0;
    FALSE = 1;
    TRUE = 2;
}

message Condition {
  string type = 1;
	StatusCondition status = 2;
}

message TaskStatus {
  repeated Condition conditions = 1;
}

message Task {
    string api_version = 1;
    string kind = 2;    
 
    Metadata metadata = 3;
    
    TaskInput input = 4;
    TaskOutput output = 5;
    TaskStatus status = 6;

    // Result is a serialized tensorflow_federated.v0.Value 
    // Its serialized so that Tasks can be deserialized without depending on the Value proto.
    // TODO(https://github.com/jlewi/flaap/issues/22): Get rid of result field.
    bytes result = 7;

    // group_nonce is used to distinguish tasks that should be handled by different clients.
    // tasks with different group_nonce should not be handled by the same client whereas tasks
    // with the same group_nonce may(should?) be processed by the same client.
    // nonce is used to indicate that values should be chosen randomly and treated opaquely.
    string group_nonce = 8;
    // group_index is used to order tasks within a group. Tasks with higher index value need to
    // be processed after lower index tasks.
    int32 group_index = 9;
}

message TaskInput {
  // TODO(https://github.com/jlewi/flaap/issues/22): Get rid of function and argument fields.
  // 
  // The value represents the function to be executed. It is the result of tracing
  // the code annotated with tf.computation and turning it into an AST.
  // function is a serialized tensorflow_federated.v0.Value 
  bytes function = 1;

  // Optional the argument to be passed to the function
  // function is a serialized tensorflow_federated.v0.Value 
  bytes argument = 2;

  // ExecutorRequest encodes the request proto in 
    // https://github.com/tensorflow/federated/blob/a6506385def304c260a424b29e5b34c6d905760e/tensorflow_federated/proto/v0/executor.proto
    // The serialized version of the proto is stored as bytes.
    // The reason for storing the seralized proto as bytes rather than using a typed field is because using a typed field
    // would require generating the TFF protos client libraries in whichever language we use (e.g GoLang). That would be better
    // but for now we punted on trying to plugging into TFF's build process to build golang protos. 
  oneof request {
    bytes create_value = 4;
    bytes create_call = 5;
    bytes create_struct = 6;
    bytes create_selection = 7;
    bytes compute = 8;
    bytes dispose = 9;
  } 
}

message TaskOutput {
 oneof response {
    bytes compute = 1;
    // TODO(jeremy): Should dispose have a response?
    bytes dispose = 2;
  } 
}

message CreateRequest {
  Task task = 1;
}

message CreateResponse {
  Task task = 1;
}

message GetRequest {
  string name = 1;
}

message GetResponse {
  Task task = 1;
}

message ListRequest {
  // If specified only list the tasks assigned to this worker.
  string worker_id = 1;

  // If set only return tasks for which the status of the Done condition is True.
  // If false return tasks for which Done condition is False or Unknown
  // TODO(jeremy): The naming/design is akward. The intent is to be able to filter tasks by the done condition so that we can only request tasks
  // which aren't done
  bool done = 2;
}

message ListResponse {
  repeated Task items = 1;
}

message Selector {
  map<string, string> match_labels = 1;
}

message UpdateRequest {
  Task task = 1;
  // Id of the worker sending the request. Used to verify that only that assigned worker updates the task.
  // Update departs from K8s convention because we need to provide the ID of the worker issuing the update
	// request. In principle that should be sent via a sidechannel (e.g. as part of Authn)  so it wouldn't
	// be in the body of the request.
  string worker_id = 2;
}

message UpdateResponse {
  Task task = 1;
}

message DeleteRequest {
  string name = 1;
}

message DeleteResponse {
}

message StatusRequest{  
}

message StatusResponse {
  // Groups assigned to workers.
  map<string, string> group_assignments = 1;

  // Count of the number of tasks keyed by the status.
  map<string, int32> task_metrics = 2;
}

// Tasks CRUD service
service TasksService {
  rpc Create (CreateRequest) returns (CreateResponse) {}
  rpc Get (GetRequest) returns (GetResponse) {}
  rpc List (ListRequest) returns (ListResponse) {}
  rpc Update (UpdateRequest) returns (UpdateResponse) {}
  rpc Delete (DeleteRequest) returns (DeleteResponse) {}
  // Status is used to monitor the status of the task service.
  rpc Status (StatusRequest) returns (StatusResponse) {}
}


// StoredData is used to serialize the data inside the filestore.
message StoredData {
  repeated Task tasks = 1;
  map<string, string> group_assignments = 2;
}