syntax = "proto3";

package flaap.v1alpha1;

import "tensorflow_federated/proto/v0/executor.proto";

option go_package = "github.com/jlewi/flaap/go/protos/v1alpha1";

message Metadata {
  string name = 1;
  map<string, string> labels = 2;
  string resourceVersion = 3;
}

enum StatusCondition {
    UNKNOWN = 0;
    FALSE = 1;
    TRUE = 2;
}

message Condition {
  string type = 1;
	StatusCondition status = 2;
}

message TaskStatus {
  repeated Condition conditions = 1;
}

message Task {
    string api_version = 1;
    string kind = 2;    
 
    Metadata metadata = 3;

    TaskInput input = 4;

    TaskStatus status = 5;
    tensorflow_federated.v0.Value result = 6;

    // group_nonce is used to distinguish tasks that should be handled by different clients.
    // tasks with different group_nonce should not be handled by the same client whereas tasks
    // with the same group_nonce may(should?) be processed by the same client.
    // nonce is used to indicate that values should be chosen randomly and treated opaquely.
    string group_nonce = 7;    
}

message TaskInput {
  // The value represents the function to be executed. It is the result of tracing
  // the code annotated with tf.computation and turning it into an AST.
  tensorflow_federated.v0.Value function = 1;

  // Optional the argument to be passed to the function
  tensorflow_federated.v0.Value argument = 2;
}

message CreateRequest {
  Task task = 1;
}

message CreateResponse {
  Task task = 1;
}

message GetRequest {
  string name = 1;
}

message GetResponse {
  Task task = 1;
}

message ListRequest {
  // If specified only list the tasks assigned to this worker.
  string worker_id = 1;

  // If set only return tasks for which the status of the Done condition is True.
  // If false return tasks for which Done condition is False or Unknown
  // TODO(jeremy): The naming/design is akward. The intent is to be able to filter tasks by the done condition so that we can only request tasks
  // which aren't done
  bool done = 2;
}

message ListResponse {
  repeated Task items = 1;
}

message Selector {
  map<string, string> match_labels = 1;
}

message UpdateRequest {
  Task task = 1;
}

message UpdateResponse {
  Task task = 1;
}

message DeleteRequest {
  string name = 1;
}

message DeleteResponse {
}

// Tasks CRUD service
service TasksService {
  rpc Create (CreateRequest) returns (CreateResponse) {}
  rpc Get (GetRequest) returns (GetResponse) {}
  rpc List (ListRequest) returns (ListResponse) {}
  rpc Update (UpdateRequest) returns (UpdateResponse) {}
  rpc Delete (DeleteRequest) returns (DeleteResponse) {}
}