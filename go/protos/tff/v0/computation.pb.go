// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.28.1
// 	protoc        v3.21.5
// source: tensorflow_federated/proto/v0/computation.proto

package v0

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	anypb "google.golang.org/protobuf/types/known/anypb"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// Only simple tensor types are currently supported here, i.e., this
// specifically excludes types such as DT_VARIANT and DT_RESOURCE.
//
// These values must match the semantics, and be a subset of,
// `tensorflow.DataType`.
type TensorType_DataType int32

const (
	TensorType_DT_INVALID    TensorType_DataType = 0
	TensorType_DT_FLOAT      TensorType_DataType = 1
	TensorType_DT_DOUBLE     TensorType_DataType = 2
	TensorType_DT_INT32      TensorType_DataType = 3
	TensorType_DT_UINT8      TensorType_DataType = 4
	TensorType_DT_INT16      TensorType_DataType = 5
	TensorType_DT_INT8       TensorType_DataType = 6
	TensorType_DT_STRING     TensorType_DataType = 7
	TensorType_DT_COMPLEX64  TensorType_DataType = 8
	TensorType_DT_INT64      TensorType_DataType = 9
	TensorType_DT_BOOL       TensorType_DataType = 10
	TensorType_DT_QINT8      TensorType_DataType = 11
	TensorType_DT_QUINT8     TensorType_DataType = 12
	TensorType_DT_QINT32     TensorType_DataType = 13
	TensorType_DT_BFLOAT16   TensorType_DataType = 14
	TensorType_DT_QINT16     TensorType_DataType = 15
	TensorType_DT_QUINT16    TensorType_DataType = 16
	TensorType_DT_UINT16     TensorType_DataType = 17
	TensorType_DT_COMPLEX128 TensorType_DataType = 18
	TensorType_DT_HALF       TensorType_DataType = 19
	TensorType_DT_UINT32     TensorType_DataType = 22
	TensorType_DT_UINT64     TensorType_DataType = 23
)

// Enum value maps for TensorType_DataType.
var (
	TensorType_DataType_name = map[int32]string{
		0:  "DT_INVALID",
		1:  "DT_FLOAT",
		2:  "DT_DOUBLE",
		3:  "DT_INT32",
		4:  "DT_UINT8",
		5:  "DT_INT16",
		6:  "DT_INT8",
		7:  "DT_STRING",
		8:  "DT_COMPLEX64",
		9:  "DT_INT64",
		10: "DT_BOOL",
		11: "DT_QINT8",
		12: "DT_QUINT8",
		13: "DT_QINT32",
		14: "DT_BFLOAT16",
		15: "DT_QINT16",
		16: "DT_QUINT16",
		17: "DT_UINT16",
		18: "DT_COMPLEX128",
		19: "DT_HALF",
		22: "DT_UINT32",
		23: "DT_UINT64",
	}
	TensorType_DataType_value = map[string]int32{
		"DT_INVALID":    0,
		"DT_FLOAT":      1,
		"DT_DOUBLE":     2,
		"DT_INT32":      3,
		"DT_UINT8":      4,
		"DT_INT16":      5,
		"DT_INT8":       6,
		"DT_STRING":     7,
		"DT_COMPLEX64":  8,
		"DT_INT64":      9,
		"DT_BOOL":       10,
		"DT_QINT8":      11,
		"DT_QUINT8":     12,
		"DT_QINT32":     13,
		"DT_BFLOAT16":   14,
		"DT_QINT16":     15,
		"DT_QUINT16":    16,
		"DT_UINT16":     17,
		"DT_COMPLEX128": 18,
		"DT_HALF":       19,
		"DT_UINT32":     22,
		"DT_UINT64":     23,
	}
)

func (x TensorType_DataType) Enum() *TensorType_DataType {
	p := new(TensorType_DataType)
	*p = x
	return p
}

func (x TensorType_DataType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (TensorType_DataType) Descriptor() protoreflect.EnumDescriptor {
	return file_tensorflow_federated_proto_v0_computation_proto_enumTypes[0].Descriptor()
}

func (TensorType_DataType) Type() protoreflect.EnumType {
	return &file_tensorflow_federated_proto_v0_computation_proto_enumTypes[0]
}

func (x TensorType_DataType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use TensorType_DataType.Descriptor instead.
func (TensorType_DataType) EnumDescriptor() ([]byte, []int) {
	return file_tensorflow_federated_proto_v0_computation_proto_rawDescGZIP(), []int{5, 0}
}

// A core data structure that contains a serialized representation of a unit of
// processing to perform by the TensorFlow Federated framework. This data
// structure is the primary unit of composition and the means by which we
// represent, store, and exchange federated computations and their constituents
// between system components. It is the lowest and smallest programmable
// abstraction layer that a range of higher-level APIs will be layered upon,
// structured around the minimum set of concepts and abstractions that provide
// a level of expressiveness sufficient to efficiently support current and
// anticipated uses. This layer is not intended for consumption by most users.
//
// In its most general sense, an instance of a Computation as defined here is
// simply an expression that produces a certain value. The structure of this
// expression, typically nested, determines how this value is intended to be
// computed (hence the term "computation"). We may use terms "expression" and
// "computation" interchangeably in this and other files, although technically,
// the term "computation" refers to a process, whereas "expression" refers to
// a specification of that process.
type Computation struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The type of what's represented by this structure, which may be functional
	// or non-functional. If it is a TensorFlow block or a lambda expression,
	// the type will be functional. If it is a Struct, or a Call that returns a
	// tensor or a Struct in the result, the type will be non-functional.
	//
	// A Call is a typical way to represent an invocation of a top-level federated
	// computation with all its parameters fully specified. Thus, a top-level
	// computation with all of its parameters filled in may have a non-functional
	// type (the same as type of the result it computes). The illustrative
	// example to think of is "(x -> x + 10)(20)", the type of which is an int, a
	// non-functional type. If a top-level federated computation has all of its
	// parameters filled in, it will assume a similar form.
	Type *Type `protobuf:"bytes,1,opt,name=type,proto3" json:"type,omitempty"`
	// The specification of the computation to perform.
	//
	// A hypothetical example of a federated computation definition in Python,
	// expressed in a yet-to-be-defined syntax, might translate into definitions
	// in a serialized form as shown below.
	//
	// @tff.computation
	// def fed_eval(model):
	//
	//   @tfe.defun
	//   def local_eval(model):
	//     ...
	//     return {'loss': ..., 'accuracy': ...}
	//
	//   client_model = tff.federated_broadcast(model)
	//   client_metrics = tff.federated_map(local_eval, client_model)
	//   return tff.federated_mean(client_metrics)
	//
	//
	// fed_eval = Computation(lambda=Lambda(
	//     parameter_name='model',
	//     result=Computation(block=Block(
	//         local=[
	//             Block.Local(name='local_eval', value=Computation(
	//                 tensorflow=TensorFlow(...))),
	//             Block.Local(name='client_model', value=Computation(
	//                 call=Call(
	//                     function=Computation(
	//                         intrinsic=Intrinsic(uri='federated_broadcast')),
	//                     argument=Computation(
	//                         reference=Reference(name='model'))))),
	//             Block.Local(name='client_metrics', value=Computation(
	//                 call=Call(
	//                     function=Computation(
	//                         intrinsic=Intrinsic(uri='federated_map')),
	//                     argument=Computation(
	//                         struct=Struct(element=[
	//                             Struct.Element(
	//                                 value=Computation(
	//                                     reference=Reference(
	//                                         name='local_eval'))),
	//                             Struct.Element(
	//                                 value=Computation(
	//                                     reference=Reference(
	//                                         name='local_client_model')))
	//                         ])))))],
	//         result=Computation(
	//             call=Call(
	//                 function=Computation(
	//                     intrinsic=Intrinsic(uri='federated_mean')),
	//                 argument=Computation(
	//                     reference=Reference(name='client_metrics'))))))))
	//
	//
	// Types that are assignable to Computation:
	//	*Computation_Tensorflow
	//	*Computation_Intrinsic
	//	*Computation_Data
	//	*Computation_Lambda
	//	*Computation_Block
	//	*Computation_Reference
	//	*Computation_Call
	//	*Computation_Struct
	//	*Computation_Selection
	//	*Computation_Placement
	//	*Computation_Xla
	Computation isComputation_Computation `protobuf_oneof:"computation"`
}

func (x *Computation) Reset() {
	*x = Computation{}
	if protoimpl.UnsafeEnabled {
		mi := &file_tensorflow_federated_proto_v0_computation_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Computation) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Computation) ProtoMessage() {}

func (x *Computation) ProtoReflect() protoreflect.Message {
	mi := &file_tensorflow_federated_proto_v0_computation_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Computation.ProtoReflect.Descriptor instead.
func (*Computation) Descriptor() ([]byte, []int) {
	return file_tensorflow_federated_proto_v0_computation_proto_rawDescGZIP(), []int{0}
}

func (x *Computation) GetType() *Type {
	if x != nil {
		return x.Type
	}
	return nil
}

func (m *Computation) GetComputation() isComputation_Computation {
	if m != nil {
		return m.Computation
	}
	return nil
}

func (x *Computation) GetTensorflow() *TensorFlow {
	if x, ok := x.GetComputation().(*Computation_Tensorflow); ok {
		return x.Tensorflow
	}
	return nil
}

func (x *Computation) GetIntrinsic() *Intrinsic {
	if x, ok := x.GetComputation().(*Computation_Intrinsic); ok {
		return x.Intrinsic
	}
	return nil
}

func (x *Computation) GetData() *Data {
	if x, ok := x.GetComputation().(*Computation_Data); ok {
		return x.Data
	}
	return nil
}

func (x *Computation) GetLambda() *Lambda {
	if x, ok := x.GetComputation().(*Computation_Lambda); ok {
		return x.Lambda
	}
	return nil
}

func (x *Computation) GetBlock() *Block {
	if x, ok := x.GetComputation().(*Computation_Block); ok {
		return x.Block
	}
	return nil
}

func (x *Computation) GetReference() *Reference {
	if x, ok := x.GetComputation().(*Computation_Reference); ok {
		return x.Reference
	}
	return nil
}

func (x *Computation) GetCall() *Call {
	if x, ok := x.GetComputation().(*Computation_Call); ok {
		return x.Call
	}
	return nil
}

func (x *Computation) GetStruct() *Struct {
	if x, ok := x.GetComputation().(*Computation_Struct); ok {
		return x.Struct
	}
	return nil
}

func (x *Computation) GetSelection() *Selection {
	if x, ok := x.GetComputation().(*Computation_Selection); ok {
		return x.Selection
	}
	return nil
}

func (x *Computation) GetPlacement() *Placement {
	if x, ok := x.GetComputation().(*Computation_Placement); ok {
		return x.Placement
	}
	return nil
}

func (x *Computation) GetXla() *Xla {
	if x, ok := x.GetComputation().(*Computation_Xla); ok {
		return x.Xla
	}
	return nil
}

type isComputation_Computation interface {
	isComputation_Computation()
}

type Computation_Tensorflow struct {
	// TensorFlow computation. TensorFlow computations have functional type
	// signatures that cannot contain FederatedTypes, as they execute locally.
	// In order to construct a TensorFlow computation that maps a federated
	// value pointwise, one must use a federated map intrinsic (to be defined).
	Tensorflow *TensorFlow `protobuf:"bytes,2,opt,name=tensorflow,proto3,oneof"`
}

type Computation_Intrinsic struct {
	// A built-in federated communication operator such as broadcast, federated
	// sum, etc., or one of the custom operators added to the framework, and
	// recognized by the compiler pipeline. Intrinsics have functional types,
	// and most are defined as templates that can opperate on abstract types,
	// and/or federated values with arbitrary placements.
	Intrinsic *Intrinsic `protobuf:"bytes,3,opt,name=intrinsic,proto3,oneof"`
}

type Computation_Data struct {
	// An external source of data to be used by a computation.
	Data *Data `protobuf:"bytes,10,opt,name=data,proto3,oneof"`
}

type Computation_Lambda struct {
	// A lambda expression is the primary means of defining new parameterized
	// computations. lambdas always have functional types.
	Lambda *Lambda `protobuf:"bytes,4,opt,name=lambda,proto3,oneof"`
}

type Computation_Block struct {
	// A block of computation logic, i.e., a series of expressions that refer
	// to one-another. This mechanism is intended as a primary means of
	// breaking down longer sequences of processing into simpler parts. A block
	// can have a functional or a non-functional type (matching the type of its
	// result), as it is primarily a mechanism for organizing code.
	Block *Block `protobuf:"bytes,5,opt,name=block,proto3,oneof"`
}

type Computation_Reference struct {
	// A reference to a name defined in a surrounding context, such as a Lambda
	// or a Block, with the usual scoping rules (the name refers to the
	// innermost scope in which it is defined). Always matches the type of the
	// the parameter it references, i.e., T if the type of the lambda is T->T'.
	// For example, in a Lambda "x : int -> foo(x)", which associates locally
	// name "x" with its parameter, the reference to "x" will be of type "int",
	// just as the parameter of the lambda in which the name "x" is defined.
	Reference *Reference `protobuf:"bytes,6,opt,name=reference,proto3,oneof"`
}

type Computation_Call struct {
	// A function call is the primary means of using lambdas, TensorFlow blocks,
	// and other types of functional constructs to compute a specific result in
	// a concrete context. The type of the call is the same as the type of the
	// result of the function being called, i.e., a call with parameter of type
	// T to a function of type T -> T' has type T'.
	Call *Call `protobuf:"bytes,7,opt,name=call,proto3,oneof"`
}

type Computation_Struct struct {
	// A struct is explicitly constructed from individual member values.
	Struct *Struct `protobuf:"bytes,8,opt,name=struct,proto3,oneof"`
}

type Computation_Selection struct {
	// A selection by name or index from the result of another expression that
	// returns a Struct. The type of the selection matches the type of the
	// Struct element being selected (known statically, as the name or index is
	// known statically, rather than computed).
	//
	// Note: In higher layers of the API, we will offer convenience mechanisms
	// such as selection from a federated type. For example, if "x" is of a
	// federated type "{<foo=int, bar=string>}@clients", we will allow notation
	// such as "x.foo" as a convenient shortcut for a pointwise selection that
	// might be written as "federated_map(x, y->y.foo)" in a more complete form
	// even though "x" is technically not a Struct. Here at the level of
	// the Computation proto, however, we will represent computations in their
	// fully fleshed-out form, with map and other implicit operators already
	// injected at construction time by the framework as it translates a Python
	// source cosde that defines a computation into this serialized form.
	Selection *Selection `protobuf:"bytes,9,opt,name=selection,proto3,oneof"`
}

type Computation_Placement struct {
	// A placement literal.
	Placement *Placement `protobuf:"bytes,11,opt,name=placement,proto3,oneof"`
}

type Computation_Xla struct {
	// A local (non-federated) computation expressed in XLA. XLA computations
	// have functional type signatures, and are used in a manner similar to
	// local computations expressed in TensorFlow. However, not all types of
	// TensorFlow computations are expressible in XLA (see below for the list
	// of current limitations).
	Xla *Xla `protobuf:"bytes,12,opt,name=xla,proto3,oneof"`
}

func (*Computation_Tensorflow) isComputation_Computation() {}

func (*Computation_Intrinsic) isComputation_Computation() {}

func (*Computation_Data) isComputation_Computation() {}

func (*Computation_Lambda) isComputation_Computation() {}

func (*Computation_Block) isComputation_Computation() {}

func (*Computation_Reference) isComputation_Computation() {}

func (*Computation_Call) isComputation_Computation() {}

func (*Computation_Struct) isComputation_Computation() {}

func (*Computation_Selection) isComputation_Computation() {}

func (*Computation_Placement) isComputation_Computation() {}

func (*Computation_Xla) isComputation_Computation() {}

// A generic representation of an arbitrary type, defined as a variant over a
// number of primitive and compound types that can be nested. Note that not all
// nestings expressible with this structure may be valid, e.g., it may not make
// sense to declare a sequence of functions, or a federated type in which
// individual member values are themselves federated. However, rather than
// constraining the set of possible nestings at the syntactic level, which would
// increase boilerplate and could prove limiting in the future, we keep this
// variant structure simple, and we let the set of all valid type nestings be
// determined by the set of the currently supported operators. The current
// limitations on nesting are as follows:
// - FederatedType and FunctionType cannot be nested within a FederatedType or
//   within a SequenceType. Currently, these may only be nested within a
//   StructType.
// - A SequenceType currently cannot be nested within another SequenceType.
type Type struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to Type:
	//	*Type_Function
	//	*Type_Struct
	//	*Type_Sequence
	//	*Type_Tensor
	//	*Type_Abstract
	//	*Type_Placement
	//	*Type_Federated
	Type isType_Type `protobuf_oneof:"type"`
}

func (x *Type) Reset() {
	*x = Type{}
	if protoimpl.UnsafeEnabled {
		mi := &file_tensorflow_federated_proto_v0_computation_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Type) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Type) ProtoMessage() {}

func (x *Type) ProtoReflect() protoreflect.Message {
	mi := &file_tensorflow_federated_proto_v0_computation_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Type.ProtoReflect.Descriptor instead.
func (*Type) Descriptor() ([]byte, []int) {
	return file_tensorflow_federated_proto_v0_computation_proto_rawDescGZIP(), []int{1}
}

func (m *Type) GetType() isType_Type {
	if m != nil {
		return m.Type
	}
	return nil
}

func (x *Type) GetFunction() *FunctionType {
	if x, ok := x.GetType().(*Type_Function); ok {
		return x.Function
	}
	return nil
}

func (x *Type) GetStruct() *StructType {
	if x, ok := x.GetType().(*Type_Struct); ok {
		return x.Struct
	}
	return nil
}

func (x *Type) GetSequence() *SequenceType {
	if x, ok := x.GetType().(*Type_Sequence); ok {
		return x.Sequence
	}
	return nil
}

func (x *Type) GetTensor() *TensorType {
	if x, ok := x.GetType().(*Type_Tensor); ok {
		return x.Tensor
	}
	return nil
}

func (x *Type) GetAbstract() *AbstractType {
	if x, ok := x.GetType().(*Type_Abstract); ok {
		return x.Abstract
	}
	return nil
}

func (x *Type) GetPlacement() *PlacementType {
	if x, ok := x.GetType().(*Type_Placement); ok {
		return x.Placement
	}
	return nil
}

func (x *Type) GetFederated() *FederatedType {
	if x, ok := x.GetType().(*Type_Federated); ok {
		return x.Federated
	}
	return nil
}

type isType_Type interface {
	isType_Type()
}

type Type_Function struct {
	Function *FunctionType `protobuf:"bytes,1,opt,name=function,proto3,oneof"`
}

type Type_Struct struct {
	Struct *StructType `protobuf:"bytes,2,opt,name=struct,proto3,oneof"`
}

type Type_Sequence struct {
	Sequence *SequenceType `protobuf:"bytes,3,opt,name=sequence,proto3,oneof"`
}

type Type_Tensor struct {
	Tensor *TensorType `protobuf:"bytes,4,opt,name=tensor,proto3,oneof"`
}

type Type_Abstract struct {
	Abstract *AbstractType `protobuf:"bytes,5,opt,name=abstract,proto3,oneof"`
}

type Type_Placement struct {
	Placement *PlacementType `protobuf:"bytes,6,opt,name=placement,proto3,oneof"`
}

type Type_Federated struct {
	Federated *FederatedType `protobuf:"bytes,7,opt,name=federated,proto3,oneof"`
}

func (*Type_Function) isType_Type() {}

func (*Type_Struct) isType_Type() {}

func (*Type_Sequence) isType_Type() {}

func (*Type_Tensor) isType_Type() {}

func (*Type_Abstract) isType_Type() {}

func (*Type_Placement) isType_Type() {}

func (*Type_Federated) isType_Type() {}

// A representation of a functional type. Functions must have at most a single
// parameter and a single result. Multiple parameters or results to be modeled
// as compound types (e.g., as Structs). Note that since functions accept
// generic types, one can declare functions as parameters or results of other
// functions. We may not support functions as first-class values directly in
// the API surface, but the ability to express this is useful in defining type
// signatures for federated communication operators, and to support various
// types of extensibility.
// Concise syntax for examples of functional types: "T -> T'", where T, T' are
// the types of parameter and result, respectively.
type FunctionType struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Parameter *Type `protobuf:"bytes,1,opt,name=parameter,proto3" json:"parameter,omitempty"`
	Result    *Type `protobuf:"bytes,2,opt,name=result,proto3" json:"result,omitempty"`
}

func (x *FunctionType) Reset() {
	*x = FunctionType{}
	if protoimpl.UnsafeEnabled {
		mi := &file_tensorflow_federated_proto_v0_computation_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FunctionType) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FunctionType) ProtoMessage() {}

func (x *FunctionType) ProtoReflect() protoreflect.Message {
	mi := &file_tensorflow_federated_proto_v0_computation_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FunctionType.ProtoReflect.Descriptor instead.
func (*FunctionType) Descriptor() ([]byte, []int) {
	return file_tensorflow_federated_proto_v0_computation_proto_rawDescGZIP(), []int{2}
}

func (x *FunctionType) GetParameter() *Type {
	if x != nil {
		return x.Parameter
	}
	return nil
}

func (x *FunctionType) GetResult() *Type {
	if x != nil {
		return x.Result
	}
	return nil
}

// A representation of a type of a struct. A struct is a compound type
// based on a similar type in Python that defines a finite set of named members,
// the types of which are known statically, that are arranged in a prescribed
// order and can be referred to by their position within the Struct. Note that
// besides structs, this abstract type can also be used to represent dicts,
// OrderedDicts, and regular tuples in Python.
// Concise syntax for examples of struct types: "T_i" or "name_i=T_i" separated
// by commas and optionally enclosed in "<>" (e.g., "<bool, foo=string>"),
// where name_i is the optional name, and T_i is the type of i-th element.
type StructType struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Element []*StructType_Element `protobuf:"bytes,1,rep,name=element,proto3" json:"element,omitempty"`
}

func (x *StructType) Reset() {
	*x = StructType{}
	if protoimpl.UnsafeEnabled {
		mi := &file_tensorflow_federated_proto_v0_computation_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *StructType) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StructType) ProtoMessage() {}

func (x *StructType) ProtoReflect() protoreflect.Message {
	mi := &file_tensorflow_federated_proto_v0_computation_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StructType.ProtoReflect.Descriptor instead.
func (*StructType) Descriptor() ([]byte, []int) {
	return file_tensorflow_federated_proto_v0_computation_proto_rawDescGZIP(), []int{3}
}

func (x *StructType) GetElement() []*StructType_Element {
	if x != nil {
		return x.Element
	}
	return nil
}

// A representation of a type of a sequence. A sequence is a data structure
// that contains multiple elements of the same type that can be accessed only
// in a sequential manner, i.e., through an iterator. For now, we assume that
// a sequence can only be consumed once, i.e., there's no concept of iterator
// reset, as this facilitates high-performance implementations. We may add a
// notion of resettability in the future by introducing additional fields here
// while keeping non-resettability of sequences as the default.
// Concise syntax for examples of sequence types: "T*", where T is the type of
// elements.
type SequenceType struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Element *Type `protobuf:"bytes,1,opt,name=element,proto3" json:"element,omitempty"`
}

func (x *SequenceType) Reset() {
	*x = SequenceType{}
	if protoimpl.UnsafeEnabled {
		mi := &file_tensorflow_federated_proto_v0_computation_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SequenceType) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SequenceType) ProtoMessage() {}

func (x *SequenceType) ProtoReflect() protoreflect.Message {
	mi := &file_tensorflow_federated_proto_v0_computation_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SequenceType.ProtoReflect.Descriptor instead.
func (*SequenceType) Descriptor() ([]byte, []int) {
	return file_tensorflow_federated_proto_v0_computation_proto_rawDescGZIP(), []int{4}
}

func (x *SequenceType) GetElement() *Type {
	if x != nil {
		return x.Element
	}
	return nil
}

// A representation of a type of a single tensor in TensorFlow. Aspects such
// as sparseness are not intended to be represented at this level.
// Concise syntax for examples of tensor types: "dtype[shape]" or "dtype" for
// scalars, e.g., "bool[10]".
type TensorType struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Dtype TensorType_DataType `protobuf:"varint,1,opt,name=dtype,proto3,enum=tensorflow_federated.v0.TensorType_DataType" json:"dtype,omitempty"`
	// The sizes of each dimension of the tensor.
	//
	// Undefined dimensions are allowed and represented by -1. Defined and
	// undefined dimensions are to be considered distinct for type checking
	// purposes.
	Dims []int64 `protobuf:"varint,2,rep,packed,name=dims,proto3" json:"dims,omitempty"`
	// True iff the number of dimensions is unknown.
	//
	// If `dims` is unset:
	// - `unknown_rank` == True corresponds to tf.TensorShape(None)
	// - `unknown_rank` == False corresponds to tf.TensorShape([])
	UnknownRank bool `protobuf:"varint,3,opt,name=unknown_rank,json=unknownRank,proto3" json:"unknown_rank,omitempty"`
}

func (x *TensorType) Reset() {
	*x = TensorType{}
	if protoimpl.UnsafeEnabled {
		mi := &file_tensorflow_federated_proto_v0_computation_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TensorType) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TensorType) ProtoMessage() {}

func (x *TensorType) ProtoReflect() protoreflect.Message {
	mi := &file_tensorflow_federated_proto_v0_computation_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TensorType.ProtoReflect.Descriptor instead.
func (*TensorType) Descriptor() ([]byte, []int) {
	return file_tensorflow_federated_proto_v0_computation_proto_rawDescGZIP(), []int{5}
}

func (x *TensorType) GetDtype() TensorType_DataType {
	if x != nil {
		return x.Dtype
	}
	return TensorType_DT_INVALID
}

func (x *TensorType) GetDims() []int64 {
	if x != nil {
		return x.Dims
	}
	return nil
}

func (x *TensorType) GetUnknownRank() bool {
	if x != nil {
		return x.UnknownRank
	}
	return false
}

// A representation of an abstract type identified by a string label (analogous
// to "typename T" in C++, with "T" being the label). All occurrences of an
// abstract type with the same label within a type signature are interpreted as
// referring to the same concrete type. Abstract types can thus be used to
// represent templates similar to templates in C++. The label does not have any
// specific meaning otherwise. Any bijective renaming of all labels within a
// type signature is semantically a no-op (i.e., the resulting type definition
// is semantically identical to the original before renaming). The label may be
// modified by the compiler (e.g., due to naming conflicts).
// An AbstractType T might be used, for example, to define a signature of a
// generic aggregation operator as "federated_sum: {T}@clients -> T@server".
// Concise syntax for examples of abstract types: variations of uppercase "T",
// e.g., as in "T -> T'".
type AbstractType struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The label used to refer to this abstract type within a type signature.
	Label string `protobuf:"bytes,1,opt,name=label,proto3" json:"label,omitempty"`
}

func (x *AbstractType) Reset() {
	*x = AbstractType{}
	if protoimpl.UnsafeEnabled {
		mi := &file_tensorflow_federated_proto_v0_computation_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AbstractType) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AbstractType) ProtoMessage() {}

func (x *AbstractType) ProtoReflect() protoreflect.Message {
	mi := &file_tensorflow_federated_proto_v0_computation_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AbstractType.ProtoReflect.Descriptor instead.
func (*AbstractType) Descriptor() ([]byte, []int) {
	return file_tensorflow_federated_proto_v0_computation_proto_rawDescGZIP(), []int{6}
}

func (x *AbstractType) GetLabel() string {
	if x != nil {
		return x.Label
	}
	return ""
}

// A specification of a placement in a federated type. There are two ways of
// specifying a placement in this context that correspond to the two fields in
// the oneof below. Placement labels are used to construct template types of
// federated communication operators that can be applied to federated values.
// They relate all the identically-labeled placements that appear in the type
// signature without prescribing what specifically those placements must be.
// For example, consider the type signature below:
//
// federated_broadcast: T, p: placement -> T@p
//
// Here, "p" is a placement label, the role of which is simply to link the left
// and right sides of the type signature. The represenation of this type
// signature will use PlacementLabel on the left side.
//
// Concrete placement values are essentially placement literals, same as those
// that might appear in a computation body. They are used to bind types to
// specific placements with definite global meaning in a
// particular type of runtime environment.
type PlacementSpec struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to Placement:
	//	*PlacementSpec_Label
	//	*PlacementSpec_Value
	Placement isPlacementSpec_Placement `protobuf_oneof:"placement"`
}

func (x *PlacementSpec) Reset() {
	*x = PlacementSpec{}
	if protoimpl.UnsafeEnabled {
		mi := &file_tensorflow_federated_proto_v0_computation_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PlacementSpec) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PlacementSpec) ProtoMessage() {}

func (x *PlacementSpec) ProtoReflect() protoreflect.Message {
	mi := &file_tensorflow_federated_proto_v0_computation_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PlacementSpec.ProtoReflect.Descriptor instead.
func (*PlacementSpec) Descriptor() ([]byte, []int) {
	return file_tensorflow_federated_proto_v0_computation_proto_rawDescGZIP(), []int{7}
}

func (m *PlacementSpec) GetPlacement() isPlacementSpec_Placement {
	if m != nil {
		return m.Placement
	}
	return nil
}

func (x *PlacementSpec) GetLabel() *PlacementLabel {
	if x, ok := x.GetPlacement().(*PlacementSpec_Label); ok {
		return x.Label
	}
	return nil
}

func (x *PlacementSpec) GetValue() *Placement {
	if x, ok := x.GetPlacement().(*PlacementSpec_Value); ok {
		return x.Value
	}
	return nil
}

type isPlacementSpec_Placement interface {
	isPlacementSpec_Placement()
}

type PlacementSpec_Label struct {
	Label *PlacementLabel `protobuf:"bytes,1,opt,name=label,proto3,oneof"`
}

type PlacementSpec_Value struct {
	Value *Placement `protobuf:"bytes,2,opt,name=value,proto3,oneof"`
}

func (*PlacementSpec_Label) isPlacementSpec_Placement() {}

func (*PlacementSpec_Value) isPlacementSpec_Placement() {}

// A representation of an abstract placement identified by a string label.
// All occurrences of this abstract placement label within a type signature are
// interpreted as referring to the same specific placement, similarly to how
// this is done for abstract type labels (except that equality of placement
// labels indicates equality of values, not just types). The abstract placement
// label does not have any specific meaning otherwise, and it is not intended to
// be compared with anything other than another abstract placement label
// contained within the same type signature. A bijective renaming of all
// abstract placement labels contained in a type signature is a semantic no-op.
// The label may be modified by the compiler (e.g., due to name conflicts).
type PlacementLabel struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The label used to refer to this specific placement within a type signature.
	Label string `protobuf:"bytes,1,opt,name=label,proto3" json:"label,omitempty"`
}

func (x *PlacementLabel) Reset() {
	*x = PlacementLabel{}
	if protoimpl.UnsafeEnabled {
		mi := &file_tensorflow_federated_proto_v0_computation_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PlacementLabel) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PlacementLabel) ProtoMessage() {}

func (x *PlacementLabel) ProtoReflect() protoreflect.Message {
	mi := &file_tensorflow_federated_proto_v0_computation_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PlacementLabel.ProtoReflect.Descriptor instead.
func (*PlacementLabel) Descriptor() ([]byte, []int) {
	return file_tensorflow_federated_proto_v0_computation_proto_rawDescGZIP(), []int{8}
}

func (x *PlacementLabel) GetLabel() string {
	if x != nil {
		return x.Label
	}
	return ""
}

// A representation of a specific placement defined globally by the runtime
// environment, and embedded as a literal of the "placement" type within a type
// signature or a computation definition. Unlike the abstract placement labels,
// the URIs in these placement values have a definite global meaning for all
// computations executed within the same environment. The exact set of global
// placement URIs and their meaning will depend on the system architecture and
// the capabilities of the platform. For example, in a production setting, these
// might include dedicated URIs to represent clients, intermediate aggregators,
// and coordinator placements.
type Placement struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The globally unique URI that defines a specific global placement instance.
	// For example, an URI might represent the global collective of all mobile
	// devices running a certain app, or it might represent the specific
	// well-known address of a central coordinator. The exact naming schemes and
	// interpretation of these URIs is TBD, and will be documented later.
	Uri string `protobuf:"bytes,1,opt,name=uri,proto3" json:"uri,omitempty"`
}

func (x *Placement) Reset() {
	*x = Placement{}
	if protoimpl.UnsafeEnabled {
		mi := &file_tensorflow_federated_proto_v0_computation_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Placement) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Placement) ProtoMessage() {}

func (x *Placement) ProtoReflect() protoreflect.Message {
	mi := &file_tensorflow_federated_proto_v0_computation_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Placement.ProtoReflect.Descriptor instead.
func (*Placement) Descriptor() ([]byte, []int) {
	return file_tensorflow_federated_proto_v0_computation_proto_rawDescGZIP(), []int{9}
}

func (x *Placement) GetUri() string {
	if x != nil {
		return x.Uri
	}
	return ""
}

// A representation of a federated type, i.e., one in which member components of
// the federated value are hosted on a collective of devices in a distributed
// system (where in some cases, that collective may be a singleton). As noted
// above in the comment on "PlacementType", examples of such collectives could
// include client devices, intermediate aggregators, central coordinator, etc.,
// with one or more participants. Note that a federated type is a dependent
// type, as the placement label or value contained herein binds it to a specific
// placement, either one that's defined globally, or one that's supplied as a
// parameter and defined in another part of a computation's type signature.
// Concise syntax for federated types: "T@p" or "{T}@p" when "all_equal" is True
// or False, respectively, where "T" is the type of members, and "p" is either
// a placement label or a placement value (generally clear from context).
type FederatedType struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// A specification of placement that identifies the collective of participants
	// in a distributed system on which member components of this federated value
	// are hosted.
	//
	// If the federated type appears as a part of a functional type signature,
	// this placement will generally be defined using a PlacementLabel to bind it
	// to the type of the parameter, e.g., as below:
	//
	// federated_broadcast: T, p: placement -> T@p
	//
	// In the above "T@p" is a federated type, with label "p" (represented in the
	// type as a PlacementLabel) simply serving as a reference to the parameter
	// on the left.
	//
	// On the other hand, if a federated type appears on its own, not tied to the
	// placement of any function parameter, the placement specified here will be
	// a concrete placement literal (represented by a PlacementValue).
	Placement *PlacementSpec `protobuf:"bytes,1,opt,name=placement,proto3" json:"placement,omitempty"`
	// A bit that, if set, indicates that the member components of the federated
	// value are all equal (if not set, member components may vary). This
	// distinction is only meaningful for placements that represent collectives,
	// such as clients or intermediate aggregators. For placements that represent
	// centralized components (such as a central coordinator), this property is
	// trivially satisfied (and still documented by setting this bit to True).
	AllEqual bool `protobuf:"varint,2,opt,name=all_equal,json=allEqual,proto3" json:"all_equal,omitempty"`
	// The type of the local member components of the federated value, i.e., the
	// components that are locally hosted on each individual participant (member
	// of the collective determined by the "placement" above).
	Member *Type `protobuf:"bytes,3,opt,name=member,proto3" json:"member,omitempty"`
}

func (x *FederatedType) Reset() {
	*x = FederatedType{}
	if protoimpl.UnsafeEnabled {
		mi := &file_tensorflow_federated_proto_v0_computation_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FederatedType) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FederatedType) ProtoMessage() {}

func (x *FederatedType) ProtoReflect() protoreflect.Message {
	mi := &file_tensorflow_federated_proto_v0_computation_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FederatedType.ProtoReflect.Descriptor instead.
func (*FederatedType) Descriptor() ([]byte, []int) {
	return file_tensorflow_federated_proto_v0_computation_proto_rawDescGZIP(), []int{10}
}

func (x *FederatedType) GetPlacement() *PlacementSpec {
	if x != nil {
		return x.Placement
	}
	return nil
}

func (x *FederatedType) GetAllEqual() bool {
	if x != nil {
		return x.AllEqual
	}
	return false
}

func (x *FederatedType) GetMember() *Type {
	if x != nil {
		return x.Member
	}
	return nil
}

// A representation of the type of placements (see the discussion above by the
// definition of the Placement message that represents instances of this type).
// This message is only used in situations, where placement is passed as a
// first-class value (e.g., in the argument to broadcast). The specfications of
// federated types only refer to specific placements (see Placement above).
// Note that there is only a single primitive "placement" type. The embedded
// field "instance_label" does not qualify the type and does not affect type
// equality. It is only used to annotate the instance of this type as it appears
// in a type signature in order to form dependent types.
// Concise syntax for the placement type: "placement" for the type itself, and
// "p: placement" to annotate the specific entry in the type signature with the
// label "p".
type PlacementType struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// An optional label that can be used to refer to the specific instance of the
	// "placement" type represented by this entry in the type signature. If this
	// field is present in the PlacementType message, generally as a parameter in
	// a functional type signature, the label is associated with the specific
	// placement value supplied in that parameter, which allows it to be used to
	// specify a federated type hosted by the collective of participants
	// represented by this placement. For example, consider this type signature:
	//
	// federated_broadcast: T, p: placement -> T@p
	//
	// The type specification of the 2nd element of the broadcast argument Struct
	// would be PlacementType(instance_label=PlacementLabel(label='p')). Here, the
	// type of the second element is still simply "placement"; as noted above,
	// there is only one such built-in type to represent all sorts of collectives.
	// The presence of the label only associates 'p' with the value of the second
	// element of the parameter Struct. On the right side, the pecification of the
	// federated result type contains Placement(label=PlacementLabel(label='p')),
	// thus binding the placement of the result to the value in the argument. When
	// comparing types, the presence of this label is ignored.
	InstanceLabel *PlacementLabel `protobuf:"bytes,1,opt,name=instance_label,json=instanceLabel,proto3" json:"instance_label,omitempty"`
}

func (x *PlacementType) Reset() {
	*x = PlacementType{}
	if protoimpl.UnsafeEnabled {
		mi := &file_tensorflow_federated_proto_v0_computation_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PlacementType) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PlacementType) ProtoMessage() {}

func (x *PlacementType) ProtoReflect() protoreflect.Message {
	mi := &file_tensorflow_federated_proto_v0_computation_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PlacementType.ProtoReflect.Descriptor instead.
func (*PlacementType) Descriptor() ([]byte, []int) {
	return file_tensorflow_federated_proto_v0_computation_proto_rawDescGZIP(), []int{11}
}

func (x *PlacementType) GetInstanceLabel() *PlacementLabel {
	if x != nil {
		return x.InstanceLabel
	}
	return nil
}

// A representation of a section of TensorFlow code.
//
// The type signature associated with this type of computation must be defined
// only in terms of tensors, Structs, and sequences. Sequences cannot be nested.
//
// At the moment, we only allow sequences as a parameters (note that pointwise
// transformations of sequences can still be expressed using a map intrinsic).
// This restriction may be relaxed in the future when support for handling data
// sets as first-class objects in TensorFlow evolves.
//
// Note that unlike in polymorphic functions created by tf.defuns, the chosen
// representation requires all type signatures, including those of individual
// elements of a sequence, to be fully specified. In case of sequences, the
// structure of their elements is effectively encoded in the parts of the graph
// that constitute the serialized representation of tf.data.Datasets and
// iterators.
//
// While we will offer support for writing polymorphic TensorFlow logic, types
// will be captured automatically and made concrete based on usage at the Python
// level of the API. Users of TFF will not need to declare them explicitly, but
// template specialization will happen before computation logic gets serialized.
type TensorFlow struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// A serialized representation of a TensorFlow graph to execute.
	//
	// Stores a tensorflow.GraphDef message.
	// Note: This representation may evolve, e.g., get replaced with a MetaGraph,
	// SavedModel, or a similar structure. Dependencies on the exact form of the
	// graph encoding used here should be kept to minimum, and proxied by wrapper
	// libraries for composing computations in python/core/impl/.
	//
	// TODO(b/117428091): Update this representation based on the emerging TF 2.0
	// serialization standards as needed if/when they meet the constraints of the
	// target production environments, and provided that they don't introduce
	// additional complexity.
	GraphDef *anypb.Any `protobuf:"bytes,1,opt,name=graph_def,json=graphDef,proto3" json:"graph_def,omitempty"`
	// String name of an initialization op to run on the graph before fetching
	// results. This op is intended only to be used for running tf.Variable
	// initializers.
	InitializeOp string `protobuf:"bytes,4,opt,name=initialize_op,json=initializeOp,proto3" json:"initialize_op,omitempty"`
	// String name of a tensor which may be fed a unique identifier token for the
	// current session. This allows TensorFlow custom ops to refer to
	// session-global values created by the runner of the current session.
	SessionTokenTensorName string `protobuf:"bytes,6,opt,name=session_token_tensor_name,json=sessionTokenTensorName,proto3" json:"session_token_tensor_name,omitempty"`
	// A pair of bindings for the parameter and the result. The parameter binding
	// can be omitted if the computation does not declare a parameter. The result
	// binding is mandatory, as all TensorFlow computations must declare results.
	Parameter *TensorFlow_Binding  `protobuf:"bytes,2,opt,name=parameter,proto3" json:"parameter,omitempty"`
	Result    *TensorFlow_Binding  `protobuf:"bytes,3,opt,name=result,proto3" json:"result,omitempty"`
	CacheKey  *TensorFlow_CacheKey `protobuf:"bytes,5,opt,name=cache_key,json=cacheKey,proto3" json:"cache_key,omitempty"`
}

func (x *TensorFlow) Reset() {
	*x = TensorFlow{}
	if protoimpl.UnsafeEnabled {
		mi := &file_tensorflow_federated_proto_v0_computation_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TensorFlow) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TensorFlow) ProtoMessage() {}

func (x *TensorFlow) ProtoReflect() protoreflect.Message {
	mi := &file_tensorflow_federated_proto_v0_computation_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TensorFlow.ProtoReflect.Descriptor instead.
func (*TensorFlow) Descriptor() ([]byte, []int) {
	return file_tensorflow_federated_proto_v0_computation_proto_rawDescGZIP(), []int{12}
}

func (x *TensorFlow) GetGraphDef() *anypb.Any {
	if x != nil {
		return x.GraphDef
	}
	return nil
}

func (x *TensorFlow) GetInitializeOp() string {
	if x != nil {
		return x.InitializeOp
	}
	return ""
}

func (x *TensorFlow) GetSessionTokenTensorName() string {
	if x != nil {
		return x.SessionTokenTensorName
	}
	return ""
}

func (x *TensorFlow) GetParameter() *TensorFlow_Binding {
	if x != nil {
		return x.Parameter
	}
	return nil
}

func (x *TensorFlow) GetResult() *TensorFlow_Binding {
	if x != nil {
		return x.Result
	}
	return nil
}

func (x *TensorFlow) GetCacheKey() *TensorFlow_CacheKey {
	if x != nil {
		return x.CacheKey
	}
	return nil
}

// A representation of an intrinsic function. Intrinsics are functions that are
// known to the framework, and uniquely identified by a URI. This includes both
// the standard federated communication operators, such as, e.g., broadcast,
// federated sum, secure aggregation, and custom operators that might be added
// by the user to the pipeline. The compiler recognizes the intrinsics, and
// replaces them with a suitable implementation. Intrinsics may be both generic
// and specialized, low- and high-level. The exact naming scheme used to
// identify them, and how it can be extended to support new operators defined by
// external contributors, will be described elsewhere.
type Intrinsic struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The URI that uniquely identifies the intrinsic within the set of operators
	// built into the framework.
	Uri string `protobuf:"bytes,1,opt,name=uri,proto3" json:"uri,omitempty"`
}

func (x *Intrinsic) Reset() {
	*x = Intrinsic{}
	if protoimpl.UnsafeEnabled {
		mi := &file_tensorflow_federated_proto_v0_computation_proto_msgTypes[13]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Intrinsic) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Intrinsic) ProtoMessage() {}

func (x *Intrinsic) ProtoReflect() protoreflect.Message {
	mi := &file_tensorflow_federated_proto_v0_computation_proto_msgTypes[13]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Intrinsic.ProtoReflect.Descriptor instead.
func (*Intrinsic) Descriptor() ([]byte, []int) {
	return file_tensorflow_federated_proto_v0_computation_proto_rawDescGZIP(), []int{13}
}

func (x *Intrinsic) GetUri() string {
	if x != nil {
		return x.Uri
	}
	return ""
}

// A representation of a parameterized computation defined as a lambda
// expression that consists of a single parameter name, and an expression that
// contains references to this parameter name (the "name" computation variant).
// Lambdas can be nested, e.g., the result can also be a lambda or contain a
// lambda. Inner lambdas are allowed to refer to the parameter defined in the
// outer lambdas. We assume the usual rules of name hiding: inner names obscure
// the outer names.
//
// Concise syntax for lambdas: "parameter_name -> comp" where "comp" represents
// a parameterized computation that produces the result, or in the more general
// form "parameter_name : T -> comp" to indicate that parameter is of type "T".
// For example, a lambda that takes a 2-Struct of an unary operator and an
// integer as input, and returns the result of calling the unary operator
// on the integer, can be written as "x -> x[0](x[1])", or in the full form with
// type annotation as "x: <(int->int), arg=int> -> x[0](x[1])".
type Lambda struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The name to use internally within this lambda to refer to the parameter.
	// The parameter is mandatory. The name defined here can be used internally
	// anywhere in the result computation, except if overridden in a nested
	// lambda, where it can be hidden by a parameter with a conflicting name.
	ParameterName string `protobuf:"bytes,1,opt,name=parameter_name,json=parameterName,proto3" json:"parameter_name,omitempty"`
	// A computation that represents the result of applying the lambda to the
	// parameter. The result may (almost always will) contain references to the
	// parameter defined above.
	Result *Computation `protobuf:"bytes,2,opt,name=result,proto3" json:"result,omitempty"`
}

func (x *Lambda) Reset() {
	*x = Lambda{}
	if protoimpl.UnsafeEnabled {
		mi := &file_tensorflow_federated_proto_v0_computation_proto_msgTypes[14]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Lambda) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Lambda) ProtoMessage() {}

func (x *Lambda) ProtoReflect() protoreflect.Message {
	mi := &file_tensorflow_federated_proto_v0_computation_proto_msgTypes[14]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Lambda.ProtoReflect.Descriptor instead.
func (*Lambda) Descriptor() ([]byte, []int) {
	return file_tensorflow_federated_proto_v0_computation_proto_rawDescGZIP(), []int{14}
}

func (x *Lambda) GetParameterName() string {
	if x != nil {
		return x.ParameterName
	}
	return ""
}

func (x *Lambda) GetResult() *Computation {
	if x != nil {
		return x.Result
	}
	return nil
}

// A representation of a body of computation logic broken down into a sequence
// of local definitions that gradually build up towards a single final result
// expression. A block defines a sequence of local names, each associated with
// a computation. Computations associated with names introduced later can
// refer to names introduced earlier. At the end of a block is a single result
// computation defined in terms of those locals. It is similar to LET* in LISP.
//
// The intended usage of this abstraction is to break down complex processing
// into simpler, smaller, easier to understand units that are easier to work
// with in this broken-down representation, as opposed to a single monolithic
// complex expression. We expect it to be used, e.g., to represent top-level
// federated orchestration logic.
//
// A block is technically a redundant abstraction, as it can be equivalently
// represented using lambda expressions. For example, a simple block of the
// form "let x=y in z" is equivalent to "(x->z)(y)". Larger blocks can likewise
// be represented similarly as nested lambdas. The main purpose of introducing
// this abstraction is simplicity. While expressible via lambdas, a sequential
// representation is preferred over nested lambdas as it is more readable and
// easier to debug, and more closely matches how code is expected to be executed
// by a runtime environment, in which higher-order functions may be unsupported.
//
// One way to think of blocks is as a generalization of a GraphDef, and such,
// a mechanism for constructing data flow graphs that can include TensorFlow
// blocks and various federated communication operators as processing nodes.
// Indeed, this is the primary intended usage of blocks. In this interpretation
// a block can be thought of as a direct acyclic graph, with the locals and
// the result being the graph "nodes". Locals represent various partial results
// computed along the way, and the result is the "op" that represents the
// output. Each node has associated with it an expression (computation) that
// specifies how to derive its value from the values represented by other nodes
// referenced by name. The presence of such reference to one node's name inside
// another node's expression (computation) can be interpreted as a dependency
// edge in a data flow graph. Indeed, the data flow interpretation corresponds
// to the manner in which processing is expected to flow.
//
// Concise syntax: "let name_1=comp_1, ...., name_k=comp_k in comp" with
// "name_k" and "comp_k" representing the names of the locals, and computations
// that compute the results that those names represent. For example, a complex
// expression "x[0](x[1])" can be represented in a slightly more expanded
// form as "let f=x[0], v=[1] in f(v)".
type Block struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// One or more locals defined within the block, each associating a name with a
	// computation. Computations, whether those associated with the locals, or
	// that associated with the result below, can contain references to names
	// defined earlier, here or in the surrounding context. Self-references are
	// prohibited. All names introduced here must be different. Since execution
	// semantics at this level is purely functional without side effects, the
	// ordering in which the locals are declared is not significant, as it is only
	// the dependencies between the computations that effectively determine the
	// causal relationships that constrain the order of execution.
	//
	// Blocks can be nested, just as lambdas, and the same name scoping rules
	// apply, i.e., blocks (or lambdas) contained within an embedded computation,
	// whether in a local or in the result, are allowed to refer to names defined
	// in an outer lambda or block (unless obscured by a nested declaration).
	// If names defined in the outer context conflict with those defined in the
	// inner congtext (here), the inner names hide outer names in the context in
	// which they are defined. Thus, for example, in "x -> let x=1, y=x+1 in y",
	// the "x=1" would hide the lambda parameter, and therefore "y=x+1" would
	// refer to the inner "x".
	Local []*Block_Local `protobuf:"bytes,1,rep,name=local,proto3" json:"local,omitempty"`
	// The result computation. Always required. The computation typically refers
	// to locals defined above by name, just like the result in a lambda.
	Result *Computation `protobuf:"bytes,2,opt,name=result,proto3" json:"result,omitempty"`
}

func (x *Block) Reset() {
	*x = Block{}
	if protoimpl.UnsafeEnabled {
		mi := &file_tensorflow_federated_proto_v0_computation_proto_msgTypes[15]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Block) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Block) ProtoMessage() {}

func (x *Block) ProtoReflect() protoreflect.Message {
	mi := &file_tensorflow_federated_proto_v0_computation_proto_msgTypes[15]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Block.ProtoReflect.Descriptor instead.
func (*Block) Descriptor() ([]byte, []int) {
	return file_tensorflow_federated_proto_v0_computation_proto_rawDescGZIP(), []int{15}
}

func (x *Block) GetLocal() []*Block_Local {
	if x != nil {
		return x.Local
	}
	return nil
}

func (x *Block) GetResult() *Computation {
	if x != nil {
		return x.Result
	}
	return nil
}

// A reference to a computation defined as a local in a block, or to the
// parameter of a lambda.
type Reference struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
}

func (x *Reference) Reset() {
	*x = Reference{}
	if protoimpl.UnsafeEnabled {
		mi := &file_tensorflow_federated_proto_v0_computation_proto_msgTypes[16]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Reference) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Reference) ProtoMessage() {}

func (x *Reference) ProtoReflect() protoreflect.Message {
	mi := &file_tensorflow_federated_proto_v0_computation_proto_msgTypes[16]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Reference.ProtoReflect.Descriptor instead.
func (*Reference) Descriptor() ([]byte, []int) {
	return file_tensorflow_federated_proto_v0_computation_proto_rawDescGZIP(), []int{16}
}

func (x *Reference) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

// A representation of a function call.
//
// The concise notation for function calls is "f(x)" or "f()", where "f" is the
// function, and "x" is the optional argument.
type Call struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// A computation that represents the function to call. The value that this
	// represents must be of a functional type.
	Function *Computation `protobuf:"bytes,1,opt,name=function,proto3" json:"function,omitempty"`
	// A computation that represents the argument to the function specified above.
	// Present if and only if "function" declares a parameter. Must match the
	// function's parameter type (i.e., the function's parameter type must be
	// assignable from the argument type).
	Argument *Computation `protobuf:"bytes,2,opt,name=argument,proto3" json:"argument,omitempty"`
}

func (x *Call) Reset() {
	*x = Call{}
	if protoimpl.UnsafeEnabled {
		mi := &file_tensorflow_federated_proto_v0_computation_proto_msgTypes[17]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Call) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Call) ProtoMessage() {}

func (x *Call) ProtoReflect() protoreflect.Message {
	mi := &file_tensorflow_federated_proto_v0_computation_proto_msgTypes[17]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Call.ProtoReflect.Descriptor instead.
func (*Call) Descriptor() ([]byte, []int) {
	return file_tensorflow_federated_proto_v0_computation_proto_rawDescGZIP(), []int{17}
}

func (x *Call) GetFunction() *Computation {
	if x != nil {
		return x.Function
	}
	return nil
}

func (x *Call) GetArgument() *Computation {
	if x != nil {
		return x.Argument
	}
	return nil
}

// A representation of a Struct constructor.
//
// The concise representation of a Struct constructor is "<>"-enclosed and
// comma-separated list of value or "name=value" sections, for example "<1,2>"
// or "<foo=1,bar=2>".
type Struct struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The ordering of Struct elements is significant, and determines the type of
	// the value represented by the expression. The names are optional.
	Element []*Struct_Element `protobuf:"bytes,1,rep,name=element,proto3" json:"element,omitempty"`
}

func (x *Struct) Reset() {
	*x = Struct{}
	if protoimpl.UnsafeEnabled {
		mi := &file_tensorflow_federated_proto_v0_computation_proto_msgTypes[18]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Struct) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Struct) ProtoMessage() {}

func (x *Struct) ProtoReflect() protoreflect.Message {
	mi := &file_tensorflow_federated_proto_v0_computation_proto_msgTypes[18]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Struct.ProtoReflect.Descriptor instead.
func (*Struct) Descriptor() ([]byte, []int) {
	return file_tensorflow_federated_proto_v0_computation_proto_rawDescGZIP(), []int{18}
}

func (x *Struct) GetElement() []*Struct_Element {
	if x != nil {
		return x.Element
	}
	return nil
}

// A representation of a value selected from a Struct returned by another
// computation.
//
// The concise representation of a selection is "x[index]" for positional
// selection, and "x.name" for name-based selection, where "x" represents the
// source from which to select. For example, in lambda "x -> x[0](x[1])", where
// "x[0]" and "x[1]" both represent selections of named members from the STruct
// "x", respectively.
type Selection struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The source of selection, always required. This is a computation that
	// returns a Struct (possibly nested), from which to select an element
	// by name or by index.
	Source *Computation `protobuf:"bytes,1,opt,name=source,proto3" json:"source,omitempty"`
	// A specification of what to select from the context (Struct). Indexes,
	// when applied to Structs, are 0-based, i.e., "[0]" selects the first
	// element.
	Index int32 `protobuf:"varint,3,opt,name=index,proto3" json:"index,omitempty"`
}

func (x *Selection) Reset() {
	*x = Selection{}
	if protoimpl.UnsafeEnabled {
		mi := &file_tensorflow_federated_proto_v0_computation_proto_msgTypes[19]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Selection) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Selection) ProtoMessage() {}

func (x *Selection) ProtoReflect() protoreflect.Message {
	mi := &file_tensorflow_federated_proto_v0_computation_proto_msgTypes[19]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Selection.ProtoReflect.Descriptor instead.
func (*Selection) Descriptor() ([]byte, []int) {
	return file_tensorflow_federated_proto_v0_computation_proto_rawDescGZIP(), []int{19}
}

func (x *Selection) GetSource() *Computation {
	if x != nil {
		return x.Source
	}
	return nil
}

func (x *Selection) GetIndex() int32 {
	if x != nil {
		return x.Index
	}
	return 0
}

// A specification of an external source of data to be used by a computation.
//
// Data streams are curently expected to always be nested structures composed
// of sequences, Structs, and tensor types. Sequences cannot be nested.
// Structs may appear at the outer level (to return multiple sequences,
// e.g., training and testing samples), or at the element level (if sequences
// contain structured elements, e.g., examples already parsed into individual
// features).
//
// Although data could conceivably be modeled via intrinsics, we factor it out
// to more conveniently express various types of input pipelines without having
// to pack everything into a URI. Sources of data could include training
// examples emitted by a mobile app, files on a filesystem, data to obtain from
// a location on the web, etc., and the specification, in addition to the
// origin of the data, could include things like example selection criteria,
// data decoding or simple transformations. For now, this structure is simply a
// URI to be interpreted by the runtime environment. To be extended as needed.
type Data struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to Data:
	//	*Data_Uri
	Data isData_Data `protobuf_oneof:"data"`
}

func (x *Data) Reset() {
	*x = Data{}
	if protoimpl.UnsafeEnabled {
		mi := &file_tensorflow_federated_proto_v0_computation_proto_msgTypes[20]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Data) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Data) ProtoMessage() {}

func (x *Data) ProtoReflect() protoreflect.Message {
	mi := &file_tensorflow_federated_proto_v0_computation_proto_msgTypes[20]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Data.ProtoReflect.Descriptor instead.
func (*Data) Descriptor() ([]byte, []int) {
	return file_tensorflow_federated_proto_v0_computation_proto_rawDescGZIP(), []int{20}
}

func (m *Data) GetData() isData_Data {
	if m != nil {
		return m.Data
	}
	return nil
}

func (x *Data) GetUri() string {
	if x, ok := x.GetData().(*Data_Uri); ok {
		return x.Uri
	}
	return ""
}

type isData_Data interface {
	isData_Data()
}

type Data_Uri struct {
	// A specification of the data stream as a URI to be interpreted by the
	// environment.
	Uri string `protobuf:"bytes,1,opt,name=uri,proto3,oneof"`
}

func (*Data_Uri) isData_Data() {}

// A representation of a section of XLA code (experimental-only).
//
// The type signature associated with this type of computation must be defined
// as a function which accepts and returns tensors and potentially nested
// structures of tensors.
type Xla struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// A serialized representation of XLA code to execute.
	//
	// Stores an `HloModuleProto` message, as defined in the TensorFlow repo in
	// the file "tensorflow/compiler/xla/service/hlo.proto" in the main branch.
	//
	// It is recommended, albeit not required that the entry computation in this
	// module accepts its parameters as a single tuple.
	//
	// NOTE: As it is experimental-only, this representation may evolve, possibly
	// in a manner that is backwards-incompatible. Make sure not to depend on the
	// current form of this representation, and not to persist it in places where
	// subsequent changes could cause breakages.
	HloModule *anypb.Any `protobuf:"bytes,1,opt,name=hlo_module,json=hloModule,proto3" json:"hlo_module,omitempty"`
	// A pair of bindings for the parameter and the result. The parameter binding
	// can be omitted if the computation does not declare a parameter. The result
	// binding is mandatory, as all XLA computations must declare results.
	Parameter *Xla_Binding `protobuf:"bytes,2,opt,name=parameter,proto3" json:"parameter,omitempty"`
	Result    *Xla_Binding `protobuf:"bytes,3,opt,name=result,proto3" json:"result,omitempty"`
}

func (x *Xla) Reset() {
	*x = Xla{}
	if protoimpl.UnsafeEnabled {
		mi := &file_tensorflow_federated_proto_v0_computation_proto_msgTypes[21]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Xla) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Xla) ProtoMessage() {}

func (x *Xla) ProtoReflect() protoreflect.Message {
	mi := &file_tensorflow_federated_proto_v0_computation_proto_msgTypes[21]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Xla.ProtoReflect.Descriptor instead.
func (*Xla) Descriptor() ([]byte, []int) {
	return file_tensorflow_federated_proto_v0_computation_proto_rawDescGZIP(), []int{21}
}

func (x *Xla) GetHloModule() *anypb.Any {
	if x != nil {
		return x.HloModule
	}
	return nil
}

func (x *Xla) GetParameter() *Xla_Binding {
	if x != nil {
		return x.Parameter
	}
	return nil
}

func (x *Xla) GetResult() *Xla_Binding {
	if x != nil {
		return x.Result
	}
	return nil
}

type StructType_Element struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name  string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	Value *Type  `protobuf:"bytes,2,opt,name=value,proto3" json:"value,omitempty"`
}

func (x *StructType_Element) Reset() {
	*x = StructType_Element{}
	if protoimpl.UnsafeEnabled {
		mi := &file_tensorflow_federated_proto_v0_computation_proto_msgTypes[22]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *StructType_Element) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StructType_Element) ProtoMessage() {}

func (x *StructType_Element) ProtoReflect() protoreflect.Message {
	mi := &file_tensorflow_federated_proto_v0_computation_proto_msgTypes[22]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StructType_Element.ProtoReflect.Descriptor instead.
func (*StructType_Element) Descriptor() ([]byte, []int) {
	return file_tensorflow_federated_proto_v0_computation_proto_rawDescGZIP(), []int{3, 0}
}

func (x *StructType_Element) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *StructType_Element) GetValue() *Type {
	if x != nil {
		return x.Value
	}
	return nil
}

// A general representation of a binding of either a parameter or a result to
// a part of the embedded TensorFlow graph. Note that the structure of the
// binding is nested, and parallels the structure of the corresponding part of
// the type signature.
type TensorFlow_Binding struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to Binding:
	//	*TensorFlow_Binding_Struct
	//	*TensorFlow_Binding_Tensor
	//	*TensorFlow_Binding_Sequence
	Binding isTensorFlow_Binding_Binding `protobuf_oneof:"binding"`
}

func (x *TensorFlow_Binding) Reset() {
	*x = TensorFlow_Binding{}
	if protoimpl.UnsafeEnabled {
		mi := &file_tensorflow_federated_proto_v0_computation_proto_msgTypes[23]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TensorFlow_Binding) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TensorFlow_Binding) ProtoMessage() {}

func (x *TensorFlow_Binding) ProtoReflect() protoreflect.Message {
	mi := &file_tensorflow_federated_proto_v0_computation_proto_msgTypes[23]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TensorFlow_Binding.ProtoReflect.Descriptor instead.
func (*TensorFlow_Binding) Descriptor() ([]byte, []int) {
	return file_tensorflow_federated_proto_v0_computation_proto_rawDescGZIP(), []int{12, 0}
}

func (m *TensorFlow_Binding) GetBinding() isTensorFlow_Binding_Binding {
	if m != nil {
		return m.Binding
	}
	return nil
}

func (x *TensorFlow_Binding) GetStruct() *TensorFlow_StructBinding {
	if x, ok := x.GetBinding().(*TensorFlow_Binding_Struct); ok {
		return x.Struct
	}
	return nil
}

func (x *TensorFlow_Binding) GetTensor() *TensorFlow_TensorBinding {
	if x, ok := x.GetBinding().(*TensorFlow_Binding_Tensor); ok {
		return x.Tensor
	}
	return nil
}

func (x *TensorFlow_Binding) GetSequence() *TensorFlow_SequenceBinding {
	if x, ok := x.GetBinding().(*TensorFlow_Binding_Sequence); ok {
		return x.Sequence
	}
	return nil
}

type isTensorFlow_Binding_Binding interface {
	isTensorFlow_Binding_Binding()
}

type TensorFlow_Binding_Struct struct {
	// A binding associated with a struct in the type signature. Specifies an
	// individual binding for each element of the struct.
	Struct *TensorFlow_StructBinding `protobuf:"bytes,1,opt,name=struct,proto3,oneof"`
}

type TensorFlow_Binding_Tensor struct {
	// A binding associated with a (logical) tensor in the type signature.
	// Associates that tensor to one or more (concrete) tensors in the graph.
	Tensor *TensorFlow_TensorBinding `protobuf:"bytes,2,opt,name=tensor,proto3,oneof"`
}

type TensorFlow_Binding_Sequence struct {
	// A binding associated with a sequence. Associates the sequence with a
	// part of the TensorFlow graph that will represent a data set iterator,
	// next element, or an equivalent iterator-like structure.
	Sequence *TensorFlow_SequenceBinding `protobuf:"bytes,3,opt,name=sequence,proto3,oneof"`
}

func (*TensorFlow_Binding_Struct) isTensorFlow_Binding_Binding() {}

func (*TensorFlow_Binding_Tensor) isTensorFlow_Binding_Binding() {}

func (*TensorFlow_Binding_Sequence) isTensorFlow_Binding_Binding() {}

// A binding of a Struct declared in the type signature to parts of the
// embedded TensorFlow graph.
type TensorFlow_StructBinding struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Bindings for elements of the Struct. The number of elements in this field
	// must be equal to the number of Struct elements declared in the type
	// signature, with the k-th binding declared here corresponding to the k-th
	// Struct element in the type signature. The element names are omitted since
	// they are redundant (correspondence is established by element order).
	Element []*TensorFlow_Binding `protobuf:"bytes,1,rep,name=element,proto3" json:"element,omitempty"`
}

func (x *TensorFlow_StructBinding) Reset() {
	*x = TensorFlow_StructBinding{}
	if protoimpl.UnsafeEnabled {
		mi := &file_tensorflow_federated_proto_v0_computation_proto_msgTypes[24]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TensorFlow_StructBinding) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TensorFlow_StructBinding) ProtoMessage() {}

func (x *TensorFlow_StructBinding) ProtoReflect() protoreflect.Message {
	mi := &file_tensorflow_federated_proto_v0_computation_proto_msgTypes[24]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TensorFlow_StructBinding.ProtoReflect.Descriptor instead.
func (*TensorFlow_StructBinding) Descriptor() ([]byte, []int) {
	return file_tensorflow_federated_proto_v0_computation_proto_rawDescGZIP(), []int{12, 1}
}

func (x *TensorFlow_StructBinding) GetElement() []*TensorFlow_Binding {
	if x != nil {
		return x.Element
	}
	return nil
}

// A representation of a single tensor declared in the type signature in the
// serialized graph representation embedded here.
type TensorFlow_TensorBinding struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to Binding:
	//	*TensorFlow_TensorBinding_TensorName
	Binding isTensorFlow_TensorBinding_Binding `protobuf_oneof:"binding"`
}

func (x *TensorFlow_TensorBinding) Reset() {
	*x = TensorFlow_TensorBinding{}
	if protoimpl.UnsafeEnabled {
		mi := &file_tensorflow_federated_proto_v0_computation_proto_msgTypes[25]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TensorFlow_TensorBinding) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TensorFlow_TensorBinding) ProtoMessage() {}

func (x *TensorFlow_TensorBinding) ProtoReflect() protoreflect.Message {
	mi := &file_tensorflow_federated_proto_v0_computation_proto_msgTypes[25]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TensorFlow_TensorBinding.ProtoReflect.Descriptor instead.
func (*TensorFlow_TensorBinding) Descriptor() ([]byte, []int) {
	return file_tensorflow_federated_proto_v0_computation_proto_rawDescGZIP(), []int{12, 2}
}

func (m *TensorFlow_TensorBinding) GetBinding() isTensorFlow_TensorBinding_Binding {
	if m != nil {
		return m.Binding
	}
	return nil
}

func (x *TensorFlow_TensorBinding) GetTensorName() string {
	if x, ok := x.GetBinding().(*TensorFlow_TensorBinding_TensorName); ok {
		return x.TensorName
	}
	return ""
}

type isTensorFlow_TensorBinding_Binding interface {
	isTensorFlow_TensorBinding_Binding()
}

type TensorFlow_TensorBinding_TensorName struct {
	// The name of a dense tensor in a TensorFlow graph that corresponds to a
	// single tensor component in the type signature.
	TensorName string `protobuf:"bytes,1,opt,name=tensor_name,json=tensorName,proto3,oneof"`
}

func (*TensorFlow_TensorBinding_TensorName) isTensorFlow_TensorBinding_Binding() {}

// A representation of a sequence declared in the type signature.
type TensorFlow_SequenceBinding struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to Binding:
	//	*TensorFlow_SequenceBinding_VariantTensorName
	//	*TensorFlow_SequenceBinding_GraphDefTensorName
	Binding isTensorFlow_SequenceBinding_Binding `protobuf_oneof:"binding"`
}

func (x *TensorFlow_SequenceBinding) Reset() {
	*x = TensorFlow_SequenceBinding{}
	if protoimpl.UnsafeEnabled {
		mi := &file_tensorflow_federated_proto_v0_computation_proto_msgTypes[26]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TensorFlow_SequenceBinding) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TensorFlow_SequenceBinding) ProtoMessage() {}

func (x *TensorFlow_SequenceBinding) ProtoReflect() protoreflect.Message {
	mi := &file_tensorflow_federated_proto_v0_computation_proto_msgTypes[26]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TensorFlow_SequenceBinding.ProtoReflect.Descriptor instead.
func (*TensorFlow_SequenceBinding) Descriptor() ([]byte, []int) {
	return file_tensorflow_federated_proto_v0_computation_proto_rawDescGZIP(), []int{12, 3}
}

func (m *TensorFlow_SequenceBinding) GetBinding() isTensorFlow_SequenceBinding_Binding {
	if m != nil {
		return m.Binding
	}
	return nil
}

func (x *TensorFlow_SequenceBinding) GetVariantTensorName() string {
	if x, ok := x.GetBinding().(*TensorFlow_SequenceBinding_VariantTensorName); ok {
		return x.VariantTensorName
	}
	return ""
}

func (x *TensorFlow_SequenceBinding) GetGraphDefTensorName() string {
	if x, ok := x.GetBinding().(*TensorFlow_SequenceBinding_GraphDefTensorName); ok {
		return x.GraphDefTensorName
	}
	return ""
}

type isTensorFlow_SequenceBinding_Binding interface {
	isTensorFlow_SequenceBinding_Binding()
}

type TensorFlow_SequenceBinding_VariantTensorName struct {
	// The name of the variant tensor that represents the data set created
	// using `tf.data.experimental.from_variant`.
	VariantTensorName string `protobuf:"bytes,2,opt,name=variant_tensor_name,json=variantTensorName,proto3,oneof"`
}

type TensorFlow_SequenceBinding_GraphDefTensorName struct {
	// The name of the string tensor that represents the data set created
	// using `tf.raw_ops.DatasetFromGraph`.
	GraphDefTensorName string `protobuf:"bytes,3,opt,name=graph_def_tensor_name,json=graphDefTensorName,proto3,oneof"`
}

func (*TensorFlow_SequenceBinding_VariantTensorName) isTensorFlow_SequenceBinding_Binding() {}

func (*TensorFlow_SequenceBinding_GraphDefTensorName) isTensorFlow_SequenceBinding_Binding() {}

// An optional id that can be used to identify identical TensorFlow messages
// without having to compare the (potentially large) `graph_def` fields.
//
// This field is not intended to be set during comptuation
// construction/tracing. Rather, it is designed as a final compilation pass
// that allows execution stacks to "cache" the graphs across invoke calls,
// avoiding costly graph parsing every invocation.
//
// The id is NOT required to be unique across machines, meaning two machines
// producing the same graph_def may have the same ids. If these machines
// should not be talking to the same execution stack.
//
// NOTE: the default value of 0 has the same meaning as having the field
// unset, and having no id. Any code setting this value should exclude zero.
type TensorFlow_CacheKey struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id uint64 `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
}

func (x *TensorFlow_CacheKey) Reset() {
	*x = TensorFlow_CacheKey{}
	if protoimpl.UnsafeEnabled {
		mi := &file_tensorflow_federated_proto_v0_computation_proto_msgTypes[27]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TensorFlow_CacheKey) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TensorFlow_CacheKey) ProtoMessage() {}

func (x *TensorFlow_CacheKey) ProtoReflect() protoreflect.Message {
	mi := &file_tensorflow_federated_proto_v0_computation_proto_msgTypes[27]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TensorFlow_CacheKey.ProtoReflect.Descriptor instead.
func (*TensorFlow_CacheKey) Descriptor() ([]byte, []int) {
	return file_tensorflow_federated_proto_v0_computation_proto_rawDescGZIP(), []int{12, 4}
}

func (x *TensorFlow_CacheKey) GetId() uint64 {
	if x != nil {
		return x.Id
	}
	return 0
}

type Block_Local struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name  string       `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	Value *Computation `protobuf:"bytes,2,opt,name=value,proto3" json:"value,omitempty"`
}

func (x *Block_Local) Reset() {
	*x = Block_Local{}
	if protoimpl.UnsafeEnabled {
		mi := &file_tensorflow_federated_proto_v0_computation_proto_msgTypes[28]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Block_Local) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Block_Local) ProtoMessage() {}

func (x *Block_Local) ProtoReflect() protoreflect.Message {
	mi := &file_tensorflow_federated_proto_v0_computation_proto_msgTypes[28]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Block_Local.ProtoReflect.Descriptor instead.
func (*Block_Local) Descriptor() ([]byte, []int) {
	return file_tensorflow_federated_proto_v0_computation_proto_rawDescGZIP(), []int{15, 0}
}

func (x *Block_Local) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *Block_Local) GetValue() *Computation {
	if x != nil {
		return x.Value
	}
	return nil
}

type Struct_Element struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name  string       `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	Value *Computation `protobuf:"bytes,2,opt,name=value,proto3" json:"value,omitempty"`
}

func (x *Struct_Element) Reset() {
	*x = Struct_Element{}
	if protoimpl.UnsafeEnabled {
		mi := &file_tensorflow_federated_proto_v0_computation_proto_msgTypes[29]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Struct_Element) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Struct_Element) ProtoMessage() {}

func (x *Struct_Element) ProtoReflect() protoreflect.Message {
	mi := &file_tensorflow_federated_proto_v0_computation_proto_msgTypes[29]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Struct_Element.ProtoReflect.Descriptor instead.
func (*Struct_Element) Descriptor() ([]byte, []int) {
	return file_tensorflow_federated_proto_v0_computation_proto_rawDescGZIP(), []int{18, 0}
}

func (x *Struct_Element) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *Struct_Element) GetValue() *Computation {
	if x != nil {
		return x.Value
	}
	return nil
}

// A general representation of a binding of either a parameter or a result to
// a part of the embedded HLO module. Note that the structure of the binding
// is nested, and it parallels the structure of the corresponding part of the
// type signature.
type Xla_Binding struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to Binding:
	//	*Xla_Binding_Struct
	//	*Xla_Binding_Tensor
	Binding isXla_Binding_Binding `protobuf_oneof:"binding"`
}

func (x *Xla_Binding) Reset() {
	*x = Xla_Binding{}
	if protoimpl.UnsafeEnabled {
		mi := &file_tensorflow_federated_proto_v0_computation_proto_msgTypes[30]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Xla_Binding) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Xla_Binding) ProtoMessage() {}

func (x *Xla_Binding) ProtoReflect() protoreflect.Message {
	mi := &file_tensorflow_federated_proto_v0_computation_proto_msgTypes[30]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Xla_Binding.ProtoReflect.Descriptor instead.
func (*Xla_Binding) Descriptor() ([]byte, []int) {
	return file_tensorflow_federated_proto_v0_computation_proto_rawDescGZIP(), []int{21, 0}
}

func (m *Xla_Binding) GetBinding() isXla_Binding_Binding {
	if m != nil {
		return m.Binding
	}
	return nil
}

func (x *Xla_Binding) GetStruct() *Xla_StructBinding {
	if x, ok := x.GetBinding().(*Xla_Binding_Struct); ok {
		return x.Struct
	}
	return nil
}

func (x *Xla_Binding) GetTensor() *Xla_TensorBinding {
	if x, ok := x.GetBinding().(*Xla_Binding_Tensor); ok {
		return x.Tensor
	}
	return nil
}

type isXla_Binding_Binding interface {
	isXla_Binding_Binding()
}

type Xla_Binding_Struct struct {
	Struct *Xla_StructBinding `protobuf:"bytes,1,opt,name=struct,proto3,oneof"`
}

type Xla_Binding_Tensor struct {
	Tensor *Xla_TensorBinding `protobuf:"bytes,2,opt,name=tensor,proto3,oneof"`
}

func (*Xla_Binding_Struct) isXla_Binding_Binding() {}

func (*Xla_Binding_Tensor) isXla_Binding_Binding() {}

// A binding associated with a struct in the type signature. Specifies an
// individual binding for each element of the struct.
type Xla_StructBinding struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Bindings for elements of the struct. The number of elements in this field
	// must be equal to the number of struct elements declared in the type
	// signature, with the k-th binding declared here corresponding to the k-th
	// struct element in the type signature. The element names are omitted since
	// they are redundant (correspondence is established by element order).
	Element []*Xla_Binding `protobuf:"bytes,1,rep,name=element,proto3" json:"element,omitempty"`
}

func (x *Xla_StructBinding) Reset() {
	*x = Xla_StructBinding{}
	if protoimpl.UnsafeEnabled {
		mi := &file_tensorflow_federated_proto_v0_computation_proto_msgTypes[31]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Xla_StructBinding) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Xla_StructBinding) ProtoMessage() {}

func (x *Xla_StructBinding) ProtoReflect() protoreflect.Message {
	mi := &file_tensorflow_federated_proto_v0_computation_proto_msgTypes[31]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Xla_StructBinding.ProtoReflect.Descriptor instead.
func (*Xla_StructBinding) Descriptor() ([]byte, []int) {
	return file_tensorflow_federated_proto_v0_computation_proto_rawDescGZIP(), []int{21, 1}
}

func (x *Xla_StructBinding) GetElement() []*Xla_Binding {
	if x != nil {
		return x.Element
	}
	return nil
}

// A binding associated with a (logical) tensor in the type signature.
// Associates that tensor to one or more (concrete) tensors in the inputs
// or outputs of a computation in the module.
type Xla_TensorBinding struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to Binding:
	//	*Xla_TensorBinding_Index
	Binding isXla_TensorBinding_Binding `protobuf_oneof:"binding"`
}

func (x *Xla_TensorBinding) Reset() {
	*x = Xla_TensorBinding{}
	if protoimpl.UnsafeEnabled {
		mi := &file_tensorflow_federated_proto_v0_computation_proto_msgTypes[32]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Xla_TensorBinding) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Xla_TensorBinding) ProtoMessage() {}

func (x *Xla_TensorBinding) ProtoReflect() protoreflect.Message {
	mi := &file_tensorflow_federated_proto_v0_computation_proto_msgTypes[32]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Xla_TensorBinding.ProtoReflect.Descriptor instead.
func (*Xla_TensorBinding) Descriptor() ([]byte, []int) {
	return file_tensorflow_federated_proto_v0_computation_proto_rawDescGZIP(), []int{21, 2}
}

func (m *Xla_TensorBinding) GetBinding() isXla_TensorBinding_Binding {
	if m != nil {
		return m.Binding
	}
	return nil
}

func (x *Xla_TensorBinding) GetIndex() int32 {
	if x, ok := x.GetBinding().(*Xla_TensorBinding_Index); ok {
		return x.Index
	}
	return 0
}

type isXla_TensorBinding_Binding interface {
	isXla_TensorBinding_Binding()
}

type Xla_TensorBinding_Index struct {
	// The 0-based index of this tensor in (the flattened form of) either the
	// parameter or result tuple for the entry computation of the HLO module,
	// i.e., the `HloComputationProto` with the id matching the module's
	// `entry_computation_id`.
	//
	// The order of indexes associated with the result tensors is defined by
	// the order in which tensors appear in the DFS traversal of the root
	// instruction in the computation (which can be a tensor, or a possibly
	// recursively nested tuple). For example, if the XLA computation returns
	// a nested tuple ((int32, int32), int32), the indexes of the tensors in
	// the result are ((0, 1), 2), accordingly.
	//
	// The order of indexes for parameter tensors is defined likewise. In the
	// case of multiple arguments, tensor indexes are determined by traversing
	// arguments in the order in which they appear on the parameter list (the
	// order of `parameter_number` in the `HloInstructionProto`s.
	// For example, if the computation takes 2 arguments, the first of which
	// is a 2-tuple of tensors, and the second of which is a tensor, the
	// indexes identifying the individual portions of the argument list would
	// be (0, 1), 2, i.e., 0 would refer to the first tuple element of the
	// first parameter, etc.
	Index int32 `protobuf:"varint,1,opt,name=index,proto3,oneof"`
}

func (*Xla_TensorBinding_Index) isXla_TensorBinding_Binding() {}

var File_tensorflow_federated_proto_v0_computation_proto protoreflect.FileDescriptor

var file_tensorflow_federated_proto_v0_computation_proto_rawDesc = []byte{
	0x0a, 0x2f, 0x74, 0x65, 0x6e, 0x73, 0x6f, 0x72, 0x66, 0x6c, 0x6f, 0x77, 0x5f, 0x66, 0x65, 0x64,
	0x65, 0x72, 0x61, 0x74, 0x65, 0x64, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2f, 0x76, 0x30, 0x2f,
	0x63, 0x6f, 0x6d, 0x70, 0x75, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x12, 0x17, 0x74, 0x65, 0x6e, 0x73, 0x6f, 0x72, 0x66, 0x6c, 0x6f, 0x77, 0x5f, 0x66, 0x65,
	0x64, 0x65, 0x72, 0x61, 0x74, 0x65, 0x64, 0x2e, 0x76, 0x30, 0x1a, 0x19, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x61, 0x6e, 0x79, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0xf0, 0x05, 0x0a, 0x0b, 0x43, 0x6f, 0x6d, 0x70, 0x75, 0x74,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x31, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x74, 0x65, 0x6e, 0x73, 0x6f, 0x72, 0x66, 0x6c, 0x6f, 0x77,
	0x5f, 0x66, 0x65, 0x64, 0x65, 0x72, 0x61, 0x74, 0x65, 0x64, 0x2e, 0x76, 0x30, 0x2e, 0x54, 0x79,
	0x70, 0x65, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x12, 0x45, 0x0a, 0x0a, 0x74, 0x65, 0x6e, 0x73,
	0x6f, 0x72, 0x66, 0x6c, 0x6f, 0x77, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x23, 0x2e, 0x74,
	0x65, 0x6e, 0x73, 0x6f, 0x72, 0x66, 0x6c, 0x6f, 0x77, 0x5f, 0x66, 0x65, 0x64, 0x65, 0x72, 0x61,
	0x74, 0x65, 0x64, 0x2e, 0x76, 0x30, 0x2e, 0x54, 0x65, 0x6e, 0x73, 0x6f, 0x72, 0x46, 0x6c, 0x6f,
	0x77, 0x48, 0x00, 0x52, 0x0a, 0x74, 0x65, 0x6e, 0x73, 0x6f, 0x72, 0x66, 0x6c, 0x6f, 0x77, 0x12,
	0x42, 0x0a, 0x09, 0x69, 0x6e, 0x74, 0x72, 0x69, 0x6e, 0x73, 0x69, 0x63, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x22, 0x2e, 0x74, 0x65, 0x6e, 0x73, 0x6f, 0x72, 0x66, 0x6c, 0x6f, 0x77, 0x5f,
	0x66, 0x65, 0x64, 0x65, 0x72, 0x61, 0x74, 0x65, 0x64, 0x2e, 0x76, 0x30, 0x2e, 0x49, 0x6e, 0x74,
	0x72, 0x69, 0x6e, 0x73, 0x69, 0x63, 0x48, 0x00, 0x52, 0x09, 0x69, 0x6e, 0x74, 0x72, 0x69, 0x6e,
	0x73, 0x69, 0x63, 0x12, 0x33, 0x0a, 0x04, 0x64, 0x61, 0x74, 0x61, 0x18, 0x0a, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x1d, 0x2e, 0x74, 0x65, 0x6e, 0x73, 0x6f, 0x72, 0x66, 0x6c, 0x6f, 0x77, 0x5f, 0x66,
	0x65, 0x64, 0x65, 0x72, 0x61, 0x74, 0x65, 0x64, 0x2e, 0x76, 0x30, 0x2e, 0x44, 0x61, 0x74, 0x61,
	0x48, 0x00, 0x52, 0x04, 0x64, 0x61, 0x74, 0x61, 0x12, 0x39, 0x0a, 0x06, 0x6c, 0x61, 0x6d, 0x62,
	0x64, 0x61, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x74, 0x65, 0x6e, 0x73, 0x6f,
	0x72, 0x66, 0x6c, 0x6f, 0x77, 0x5f, 0x66, 0x65, 0x64, 0x65, 0x72, 0x61, 0x74, 0x65, 0x64, 0x2e,
	0x76, 0x30, 0x2e, 0x4c, 0x61, 0x6d, 0x62, 0x64, 0x61, 0x48, 0x00, 0x52, 0x06, 0x6c, 0x61, 0x6d,
	0x62, 0x64, 0x61, 0x12, 0x36, 0x0a, 0x05, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x18, 0x05, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x74, 0x65, 0x6e, 0x73, 0x6f, 0x72, 0x66, 0x6c, 0x6f, 0x77, 0x5f,
	0x66, 0x65, 0x64, 0x65, 0x72, 0x61, 0x74, 0x65, 0x64, 0x2e, 0x76, 0x30, 0x2e, 0x42, 0x6c, 0x6f,
	0x63, 0x6b, 0x48, 0x00, 0x52, 0x05, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x12, 0x42, 0x0a, 0x09, 0x72,
	0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x22,
	0x2e, 0x74, 0x65, 0x6e, 0x73, 0x6f, 0x72, 0x66, 0x6c, 0x6f, 0x77, 0x5f, 0x66, 0x65, 0x64, 0x65,
	0x72, 0x61, 0x74, 0x65, 0x64, 0x2e, 0x76, 0x30, 0x2e, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e,
	0x63, 0x65, 0x48, 0x00, 0x52, 0x09, 0x72, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x12,
	0x33, 0x0a, 0x04, 0x63, 0x61, 0x6c, 0x6c, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1d, 0x2e,
	0x74, 0x65, 0x6e, 0x73, 0x6f, 0x72, 0x66, 0x6c, 0x6f, 0x77, 0x5f, 0x66, 0x65, 0x64, 0x65, 0x72,
	0x61, 0x74, 0x65, 0x64, 0x2e, 0x76, 0x30, 0x2e, 0x43, 0x61, 0x6c, 0x6c, 0x48, 0x00, 0x52, 0x04,
	0x63, 0x61, 0x6c, 0x6c, 0x12, 0x39, 0x0a, 0x06, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x18, 0x08,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x74, 0x65, 0x6e, 0x73, 0x6f, 0x72, 0x66, 0x6c, 0x6f,
	0x77, 0x5f, 0x66, 0x65, 0x64, 0x65, 0x72, 0x61, 0x74, 0x65, 0x64, 0x2e, 0x76, 0x30, 0x2e, 0x53,
	0x74, 0x72, 0x75, 0x63, 0x74, 0x48, 0x00, 0x52, 0x06, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x12,
	0x42, 0x0a, 0x09, 0x73, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x09, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x22, 0x2e, 0x74, 0x65, 0x6e, 0x73, 0x6f, 0x72, 0x66, 0x6c, 0x6f, 0x77, 0x5f,
	0x66, 0x65, 0x64, 0x65, 0x72, 0x61, 0x74, 0x65, 0x64, 0x2e, 0x76, 0x30, 0x2e, 0x53, 0x65, 0x6c,
	0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x48, 0x00, 0x52, 0x09, 0x73, 0x65, 0x6c, 0x65, 0x63, 0x74,
	0x69, 0x6f, 0x6e, 0x12, 0x42, 0x0a, 0x09, 0x70, 0x6c, 0x61, 0x63, 0x65, 0x6d, 0x65, 0x6e, 0x74,
	0x18, 0x0b, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x74, 0x65, 0x6e, 0x73, 0x6f, 0x72, 0x66,
	0x6c, 0x6f, 0x77, 0x5f, 0x66, 0x65, 0x64, 0x65, 0x72, 0x61, 0x74, 0x65, 0x64, 0x2e, 0x76, 0x30,
	0x2e, 0x50, 0x6c, 0x61, 0x63, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x48, 0x00, 0x52, 0x09, 0x70, 0x6c,
	0x61, 0x63, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x12, 0x30, 0x0a, 0x03, 0x78, 0x6c, 0x61, 0x18, 0x0c,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x74, 0x65, 0x6e, 0x73, 0x6f, 0x72, 0x66, 0x6c, 0x6f,
	0x77, 0x5f, 0x66, 0x65, 0x64, 0x65, 0x72, 0x61, 0x74, 0x65, 0x64, 0x2e, 0x76, 0x30, 0x2e, 0x58,
	0x6c, 0x61, 0x48, 0x00, 0x52, 0x03, 0x78, 0x6c, 0x61, 0x42, 0x0d, 0x0a, 0x0b, 0x63, 0x6f, 0x6d,
	0x70, 0x75, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x22, 0xeb, 0x03, 0x0a, 0x04, 0x54, 0x79, 0x70,
	0x65, 0x12, 0x43, 0x0a, 0x08, 0x66, 0x75, 0x6e, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x25, 0x2e, 0x74, 0x65, 0x6e, 0x73, 0x6f, 0x72, 0x66, 0x6c, 0x6f, 0x77,
	0x5f, 0x66, 0x65, 0x64, 0x65, 0x72, 0x61, 0x74, 0x65, 0x64, 0x2e, 0x76, 0x30, 0x2e, 0x46, 0x75,
	0x6e, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x48, 0x00, 0x52, 0x08, 0x66, 0x75,
	0x6e, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x3d, 0x0a, 0x06, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x23, 0x2e, 0x74, 0x65, 0x6e, 0x73, 0x6f, 0x72, 0x66,
	0x6c, 0x6f, 0x77, 0x5f, 0x66, 0x65, 0x64, 0x65, 0x72, 0x61, 0x74, 0x65, 0x64, 0x2e, 0x76, 0x30,
	0x2e, 0x53, 0x74, 0x72, 0x75, 0x63, 0x74, 0x54, 0x79, 0x70, 0x65, 0x48, 0x00, 0x52, 0x06, 0x73,
	0x74, 0x72, 0x75, 0x63, 0x74, 0x12, 0x43, 0x0a, 0x08, 0x73, 0x65, 0x71, 0x75, 0x65, 0x6e, 0x63,
	0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x25, 0x2e, 0x74, 0x65, 0x6e, 0x73, 0x6f, 0x72,
	0x66, 0x6c, 0x6f, 0x77, 0x5f, 0x66, 0x65, 0x64, 0x65, 0x72, 0x61, 0x74, 0x65, 0x64, 0x2e, 0x76,
	0x30, 0x2e, 0x53, 0x65, 0x71, 0x75, 0x65, 0x6e, 0x63, 0x65, 0x54, 0x79, 0x70, 0x65, 0x48, 0x00,
	0x52, 0x08, 0x73, 0x65, 0x71, 0x75, 0x65, 0x6e, 0x63, 0x65, 0x12, 0x3d, 0x0a, 0x06, 0x74, 0x65,
	0x6e, 0x73, 0x6f, 0x72, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x23, 0x2e, 0x74, 0x65, 0x6e,
	0x73, 0x6f, 0x72, 0x66, 0x6c, 0x6f, 0x77, 0x5f, 0x66, 0x65, 0x64, 0x65, 0x72, 0x61, 0x74, 0x65,
	0x64, 0x2e, 0x76, 0x30, 0x2e, 0x54, 0x65, 0x6e, 0x73, 0x6f, 0x72, 0x54, 0x79, 0x70, 0x65, 0x48,
	0x00, 0x52, 0x06, 0x74, 0x65, 0x6e, 0x73, 0x6f, 0x72, 0x12, 0x43, 0x0a, 0x08, 0x61, 0x62, 0x73,
	0x74, 0x72, 0x61, 0x63, 0x74, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x25, 0x2e, 0x74, 0x65,
	0x6e, 0x73, 0x6f, 0x72, 0x66, 0x6c, 0x6f, 0x77, 0x5f, 0x66, 0x65, 0x64, 0x65, 0x72, 0x61, 0x74,
	0x65, 0x64, 0x2e, 0x76, 0x30, 0x2e, 0x41, 0x62, 0x73, 0x74, 0x72, 0x61, 0x63, 0x74, 0x54, 0x79,
	0x70, 0x65, 0x48, 0x00, 0x52, 0x08, 0x61, 0x62, 0x73, 0x74, 0x72, 0x61, 0x63, 0x74, 0x12, 0x46,
	0x0a, 0x09, 0x70, 0x6c, 0x61, 0x63, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x18, 0x06, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x26, 0x2e, 0x74, 0x65, 0x6e, 0x73, 0x6f, 0x72, 0x66, 0x6c, 0x6f, 0x77, 0x5f, 0x66,
	0x65, 0x64, 0x65, 0x72, 0x61, 0x74, 0x65, 0x64, 0x2e, 0x76, 0x30, 0x2e, 0x50, 0x6c, 0x61, 0x63,
	0x65, 0x6d, 0x65, 0x6e, 0x74, 0x54, 0x79, 0x70, 0x65, 0x48, 0x00, 0x52, 0x09, 0x70, 0x6c, 0x61,
	0x63, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x12, 0x46, 0x0a, 0x09, 0x66, 0x65, 0x64, 0x65, 0x72, 0x61,
	0x74, 0x65, 0x64, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x26, 0x2e, 0x74, 0x65, 0x6e, 0x73,
	0x6f, 0x72, 0x66, 0x6c, 0x6f, 0x77, 0x5f, 0x66, 0x65, 0x64, 0x65, 0x72, 0x61, 0x74, 0x65, 0x64,
	0x2e, 0x76, 0x30, 0x2e, 0x46, 0x65, 0x64, 0x65, 0x72, 0x61, 0x74, 0x65, 0x64, 0x54, 0x79, 0x70,
	0x65, 0x48, 0x00, 0x52, 0x09, 0x66, 0x65, 0x64, 0x65, 0x72, 0x61, 0x74, 0x65, 0x64, 0x42, 0x06,
	0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x22, 0x82, 0x01, 0x0a, 0x0c, 0x46, 0x75, 0x6e, 0x63, 0x74,
	0x69, 0x6f, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x12, 0x3b, 0x0a, 0x09, 0x70, 0x61, 0x72, 0x61, 0x6d,
	0x65, 0x74, 0x65, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x74, 0x65, 0x6e,
	0x73, 0x6f, 0x72, 0x66, 0x6c, 0x6f, 0x77, 0x5f, 0x66, 0x65, 0x64, 0x65, 0x72, 0x61, 0x74, 0x65,
	0x64, 0x2e, 0x76, 0x30, 0x2e, 0x54, 0x79, 0x70, 0x65, 0x52, 0x09, 0x70, 0x61, 0x72, 0x61, 0x6d,
	0x65, 0x74, 0x65, 0x72, 0x12, 0x35, 0x0a, 0x06, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x74, 0x65, 0x6e, 0x73, 0x6f, 0x72, 0x66, 0x6c, 0x6f,
	0x77, 0x5f, 0x66, 0x65, 0x64, 0x65, 0x72, 0x61, 0x74, 0x65, 0x64, 0x2e, 0x76, 0x30, 0x2e, 0x54,
	0x79, 0x70, 0x65, 0x52, 0x06, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x22, 0xa7, 0x01, 0x0a, 0x0a,
	0x53, 0x74, 0x72, 0x75, 0x63, 0x74, 0x54, 0x79, 0x70, 0x65, 0x12, 0x45, 0x0a, 0x07, 0x65, 0x6c,
	0x65, 0x6d, 0x65, 0x6e, 0x74, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x2b, 0x2e, 0x74, 0x65,
	0x6e, 0x73, 0x6f, 0x72, 0x66, 0x6c, 0x6f, 0x77, 0x5f, 0x66, 0x65, 0x64, 0x65, 0x72, 0x61, 0x74,
	0x65, 0x64, 0x2e, 0x76, 0x30, 0x2e, 0x53, 0x74, 0x72, 0x75, 0x63, 0x74, 0x54, 0x79, 0x70, 0x65,
	0x2e, 0x45, 0x6c, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x52, 0x07, 0x65, 0x6c, 0x65, 0x6d, 0x65, 0x6e,
	0x74, 0x1a, 0x52, 0x0a, 0x07, 0x45, 0x6c, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x12, 0x12, 0x0a, 0x04,
	0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65,
	0x12, 0x33, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x1d, 0x2e, 0x74, 0x65, 0x6e, 0x73, 0x6f, 0x72, 0x66, 0x6c, 0x6f, 0x77, 0x5f, 0x66, 0x65, 0x64,
	0x65, 0x72, 0x61, 0x74, 0x65, 0x64, 0x2e, 0x76, 0x30, 0x2e, 0x54, 0x79, 0x70, 0x65, 0x52, 0x05,
	0x76, 0x61, 0x6c, 0x75, 0x65, 0x22, 0x47, 0x0a, 0x0c, 0x53, 0x65, 0x71, 0x75, 0x65, 0x6e, 0x63,
	0x65, 0x54, 0x79, 0x70, 0x65, 0x12, 0x37, 0x0a, 0x07, 0x65, 0x6c, 0x65, 0x6d, 0x65, 0x6e, 0x74,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x74, 0x65, 0x6e, 0x73, 0x6f, 0x72, 0x66,
	0x6c, 0x6f, 0x77, 0x5f, 0x66, 0x65, 0x64, 0x65, 0x72, 0x61, 0x74, 0x65, 0x64, 0x2e, 0x76, 0x30,
	0x2e, 0x54, 0x79, 0x70, 0x65, 0x52, 0x07, 0x65, 0x6c, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x22, 0xdd,
	0x03, 0x0a, 0x0a, 0x54, 0x65, 0x6e, 0x73, 0x6f, 0x72, 0x54, 0x79, 0x70, 0x65, 0x12, 0x42, 0x0a,
	0x05, 0x64, 0x74, 0x79, 0x70, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x2c, 0x2e, 0x74,
	0x65, 0x6e, 0x73, 0x6f, 0x72, 0x66, 0x6c, 0x6f, 0x77, 0x5f, 0x66, 0x65, 0x64, 0x65, 0x72, 0x61,
	0x74, 0x65, 0x64, 0x2e, 0x76, 0x30, 0x2e, 0x54, 0x65, 0x6e, 0x73, 0x6f, 0x72, 0x54, 0x79, 0x70,
	0x65, 0x2e, 0x44, 0x61, 0x74, 0x61, 0x54, 0x79, 0x70, 0x65, 0x52, 0x05, 0x64, 0x74, 0x79, 0x70,
	0x65, 0x12, 0x12, 0x0a, 0x04, 0x64, 0x69, 0x6d, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x03, 0x52,
	0x04, 0x64, 0x69, 0x6d, 0x73, 0x12, 0x21, 0x0a, 0x0c, 0x75, 0x6e, 0x6b, 0x6e, 0x6f, 0x77, 0x6e,
	0x5f, 0x72, 0x61, 0x6e, 0x6b, 0x18, 0x03, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0b, 0x75, 0x6e, 0x6b,
	0x6e, 0x6f, 0x77, 0x6e, 0x52, 0x61, 0x6e, 0x6b, 0x22, 0xd3, 0x02, 0x0a, 0x08, 0x44, 0x61, 0x74,
	0x61, 0x54, 0x79, 0x70, 0x65, 0x12, 0x0e, 0x0a, 0x0a, 0x44, 0x54, 0x5f, 0x49, 0x4e, 0x56, 0x41,
	0x4c, 0x49, 0x44, 0x10, 0x00, 0x12, 0x0c, 0x0a, 0x08, 0x44, 0x54, 0x5f, 0x46, 0x4c, 0x4f, 0x41,
	0x54, 0x10, 0x01, 0x12, 0x0d, 0x0a, 0x09, 0x44, 0x54, 0x5f, 0x44, 0x4f, 0x55, 0x42, 0x4c, 0x45,
	0x10, 0x02, 0x12, 0x0c, 0x0a, 0x08, 0x44, 0x54, 0x5f, 0x49, 0x4e, 0x54, 0x33, 0x32, 0x10, 0x03,
	0x12, 0x0c, 0x0a, 0x08, 0x44, 0x54, 0x5f, 0x55, 0x49, 0x4e, 0x54, 0x38, 0x10, 0x04, 0x12, 0x0c,
	0x0a, 0x08, 0x44, 0x54, 0x5f, 0x49, 0x4e, 0x54, 0x31, 0x36, 0x10, 0x05, 0x12, 0x0b, 0x0a, 0x07,
	0x44, 0x54, 0x5f, 0x49, 0x4e, 0x54, 0x38, 0x10, 0x06, 0x12, 0x0d, 0x0a, 0x09, 0x44, 0x54, 0x5f,
	0x53, 0x54, 0x52, 0x49, 0x4e, 0x47, 0x10, 0x07, 0x12, 0x10, 0x0a, 0x0c, 0x44, 0x54, 0x5f, 0x43,
	0x4f, 0x4d, 0x50, 0x4c, 0x45, 0x58, 0x36, 0x34, 0x10, 0x08, 0x12, 0x0c, 0x0a, 0x08, 0x44, 0x54,
	0x5f, 0x49, 0x4e, 0x54, 0x36, 0x34, 0x10, 0x09, 0x12, 0x0b, 0x0a, 0x07, 0x44, 0x54, 0x5f, 0x42,
	0x4f, 0x4f, 0x4c, 0x10, 0x0a, 0x12, 0x0c, 0x0a, 0x08, 0x44, 0x54, 0x5f, 0x51, 0x49, 0x4e, 0x54,
	0x38, 0x10, 0x0b, 0x12, 0x0d, 0x0a, 0x09, 0x44, 0x54, 0x5f, 0x51, 0x55, 0x49, 0x4e, 0x54, 0x38,
	0x10, 0x0c, 0x12, 0x0d, 0x0a, 0x09, 0x44, 0x54, 0x5f, 0x51, 0x49, 0x4e, 0x54, 0x33, 0x32, 0x10,
	0x0d, 0x12, 0x0f, 0x0a, 0x0b, 0x44, 0x54, 0x5f, 0x42, 0x46, 0x4c, 0x4f, 0x41, 0x54, 0x31, 0x36,
	0x10, 0x0e, 0x12, 0x0d, 0x0a, 0x09, 0x44, 0x54, 0x5f, 0x51, 0x49, 0x4e, 0x54, 0x31, 0x36, 0x10,
	0x0f, 0x12, 0x0e, 0x0a, 0x0a, 0x44, 0x54, 0x5f, 0x51, 0x55, 0x49, 0x4e, 0x54, 0x31, 0x36, 0x10,
	0x10, 0x12, 0x0d, 0x0a, 0x09, 0x44, 0x54, 0x5f, 0x55, 0x49, 0x4e, 0x54, 0x31, 0x36, 0x10, 0x11,
	0x12, 0x11, 0x0a, 0x0d, 0x44, 0x54, 0x5f, 0x43, 0x4f, 0x4d, 0x50, 0x4c, 0x45, 0x58, 0x31, 0x32,
	0x38, 0x10, 0x12, 0x12, 0x0b, 0x0a, 0x07, 0x44, 0x54, 0x5f, 0x48, 0x41, 0x4c, 0x46, 0x10, 0x13,
	0x12, 0x0d, 0x0a, 0x09, 0x44, 0x54, 0x5f, 0x55, 0x49, 0x4e, 0x54, 0x33, 0x32, 0x10, 0x16, 0x12,
	0x0d, 0x0a, 0x09, 0x44, 0x54, 0x5f, 0x55, 0x49, 0x4e, 0x54, 0x36, 0x34, 0x10, 0x17, 0x22, 0x24,
	0x0a, 0x0c, 0x41, 0x62, 0x73, 0x74, 0x72, 0x61, 0x63, 0x74, 0x54, 0x79, 0x70, 0x65, 0x12, 0x14,
	0x0a, 0x05, 0x6c, 0x61, 0x62, 0x65, 0x6c, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x6c,
	0x61, 0x62, 0x65, 0x6c, 0x22, 0x99, 0x01, 0x0a, 0x0d, 0x50, 0x6c, 0x61, 0x63, 0x65, 0x6d, 0x65,
	0x6e, 0x74, 0x53, 0x70, 0x65, 0x63, 0x12, 0x3f, 0x0a, 0x05, 0x6c, 0x61, 0x62, 0x65, 0x6c, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x27, 0x2e, 0x74, 0x65, 0x6e, 0x73, 0x6f, 0x72, 0x66, 0x6c,
	0x6f, 0x77, 0x5f, 0x66, 0x65, 0x64, 0x65, 0x72, 0x61, 0x74, 0x65, 0x64, 0x2e, 0x76, 0x30, 0x2e,
	0x50, 0x6c, 0x61, 0x63, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x4c, 0x61, 0x62, 0x65, 0x6c, 0x48, 0x00,
	0x52, 0x05, 0x6c, 0x61, 0x62, 0x65, 0x6c, 0x12, 0x3a, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x74, 0x65, 0x6e, 0x73, 0x6f, 0x72, 0x66,
	0x6c, 0x6f, 0x77, 0x5f, 0x66, 0x65, 0x64, 0x65, 0x72, 0x61, 0x74, 0x65, 0x64, 0x2e, 0x76, 0x30,
	0x2e, 0x50, 0x6c, 0x61, 0x63, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x48, 0x00, 0x52, 0x05, 0x76, 0x61,
	0x6c, 0x75, 0x65, 0x42, 0x0b, 0x0a, 0x09, 0x70, 0x6c, 0x61, 0x63, 0x65, 0x6d, 0x65, 0x6e, 0x74,
	0x22, 0x26, 0x0a, 0x0e, 0x50, 0x6c, 0x61, 0x63, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x4c, 0x61, 0x62,
	0x65, 0x6c, 0x12, 0x14, 0x0a, 0x05, 0x6c, 0x61, 0x62, 0x65, 0x6c, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x05, 0x6c, 0x61, 0x62, 0x65, 0x6c, 0x22, 0x1d, 0x0a, 0x09, 0x50, 0x6c, 0x61, 0x63,
	0x65, 0x6d, 0x65, 0x6e, 0x74, 0x12, 0x10, 0x0a, 0x03, 0x75, 0x72, 0x69, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x03, 0x75, 0x72, 0x69, 0x22, 0xa9, 0x01, 0x0a, 0x0d, 0x46, 0x65, 0x64, 0x65,
	0x72, 0x61, 0x74, 0x65, 0x64, 0x54, 0x79, 0x70, 0x65, 0x12, 0x44, 0x0a, 0x09, 0x70, 0x6c, 0x61,
	0x63, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x26, 0x2e, 0x74,
	0x65, 0x6e, 0x73, 0x6f, 0x72, 0x66, 0x6c, 0x6f, 0x77, 0x5f, 0x66, 0x65, 0x64, 0x65, 0x72, 0x61,
	0x74, 0x65, 0x64, 0x2e, 0x76, 0x30, 0x2e, 0x50, 0x6c, 0x61, 0x63, 0x65, 0x6d, 0x65, 0x6e, 0x74,
	0x53, 0x70, 0x65, 0x63, 0x52, 0x09, 0x70, 0x6c, 0x61, 0x63, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x12,
	0x1b, 0x0a, 0x09, 0x61, 0x6c, 0x6c, 0x5f, 0x65, 0x71, 0x75, 0x61, 0x6c, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x08, 0x52, 0x08, 0x61, 0x6c, 0x6c, 0x45, 0x71, 0x75, 0x61, 0x6c, 0x12, 0x35, 0x0a, 0x06,
	0x6d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x74,
	0x65, 0x6e, 0x73, 0x6f, 0x72, 0x66, 0x6c, 0x6f, 0x77, 0x5f, 0x66, 0x65, 0x64, 0x65, 0x72, 0x61,
	0x74, 0x65, 0x64, 0x2e, 0x76, 0x30, 0x2e, 0x54, 0x79, 0x70, 0x65, 0x52, 0x06, 0x6d, 0x65, 0x6d,
	0x62, 0x65, 0x72, 0x22, 0x5f, 0x0a, 0x0d, 0x50, 0x6c, 0x61, 0x63, 0x65, 0x6d, 0x65, 0x6e, 0x74,
	0x54, 0x79, 0x70, 0x65, 0x12, 0x4e, 0x0a, 0x0e, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65,
	0x5f, 0x6c, 0x61, 0x62, 0x65, 0x6c, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x27, 0x2e, 0x74,
	0x65, 0x6e, 0x73, 0x6f, 0x72, 0x66, 0x6c, 0x6f, 0x77, 0x5f, 0x66, 0x65, 0x64, 0x65, 0x72, 0x61,
	0x74, 0x65, 0x64, 0x2e, 0x76, 0x30, 0x2e, 0x50, 0x6c, 0x61, 0x63, 0x65, 0x6d, 0x65, 0x6e, 0x74,
	0x4c, 0x61, 0x62, 0x65, 0x6c, 0x52, 0x0d, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x4c,
	0x61, 0x62, 0x65, 0x6c, 0x22, 0xbd, 0x07, 0x0a, 0x0a, 0x54, 0x65, 0x6e, 0x73, 0x6f, 0x72, 0x46,
	0x6c, 0x6f, 0x77, 0x12, 0x31, 0x0a, 0x09, 0x67, 0x72, 0x61, 0x70, 0x68, 0x5f, 0x64, 0x65, 0x66,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x41, 0x6e, 0x79, 0x52, 0x08, 0x67, 0x72,
	0x61, 0x70, 0x68, 0x44, 0x65, 0x66, 0x12, 0x23, 0x0a, 0x0d, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x61,
	0x6c, 0x69, 0x7a, 0x65, 0x5f, 0x6f, 0x70, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x69,
	0x6e, 0x69, 0x74, 0x69, 0x61, 0x6c, 0x69, 0x7a, 0x65, 0x4f, 0x70, 0x12, 0x39, 0x0a, 0x19, 0x73,
	0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x5f, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x5f, 0x74, 0x65, 0x6e,
	0x73, 0x6f, 0x72, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x16,
	0x73, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x54, 0x65, 0x6e, 0x73,
	0x6f, 0x72, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x49, 0x0a, 0x09, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x65,
	0x74, 0x65, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2b, 0x2e, 0x74, 0x65, 0x6e, 0x73,
	0x6f, 0x72, 0x66, 0x6c, 0x6f, 0x77, 0x5f, 0x66, 0x65, 0x64, 0x65, 0x72, 0x61, 0x74, 0x65, 0x64,
	0x2e, 0x76, 0x30, 0x2e, 0x54, 0x65, 0x6e, 0x73, 0x6f, 0x72, 0x46, 0x6c, 0x6f, 0x77, 0x2e, 0x42,
	0x69, 0x6e, 0x64, 0x69, 0x6e, 0x67, 0x52, 0x09, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x65, 0x74, 0x65,
	0x72, 0x12, 0x43, 0x0a, 0x06, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x2b, 0x2e, 0x74, 0x65, 0x6e, 0x73, 0x6f, 0x72, 0x66, 0x6c, 0x6f, 0x77, 0x5f, 0x66,
	0x65, 0x64, 0x65, 0x72, 0x61, 0x74, 0x65, 0x64, 0x2e, 0x76, 0x30, 0x2e, 0x54, 0x65, 0x6e, 0x73,
	0x6f, 0x72, 0x46, 0x6c, 0x6f, 0x77, 0x2e, 0x42, 0x69, 0x6e, 0x64, 0x69, 0x6e, 0x67, 0x52, 0x06,
	0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x12, 0x49, 0x0a, 0x09, 0x63, 0x61, 0x63, 0x68, 0x65, 0x5f,
	0x6b, 0x65, 0x79, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2c, 0x2e, 0x74, 0x65, 0x6e, 0x73,
	0x6f, 0x72, 0x66, 0x6c, 0x6f, 0x77, 0x5f, 0x66, 0x65, 0x64, 0x65, 0x72, 0x61, 0x74, 0x65, 0x64,
	0x2e, 0x76, 0x30, 0x2e, 0x54, 0x65, 0x6e, 0x73, 0x6f, 0x72, 0x46, 0x6c, 0x6f, 0x77, 0x2e, 0x43,
	0x61, 0x63, 0x68, 0x65, 0x4b, 0x65, 0x79, 0x52, 0x08, 0x63, 0x61, 0x63, 0x68, 0x65, 0x4b, 0x65,
	0x79, 0x1a, 0x81, 0x02, 0x0a, 0x07, 0x42, 0x69, 0x6e, 0x64, 0x69, 0x6e, 0x67, 0x12, 0x4b, 0x0a,
	0x06, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x31, 0x2e,
	0x74, 0x65, 0x6e, 0x73, 0x6f, 0x72, 0x66, 0x6c, 0x6f, 0x77, 0x5f, 0x66, 0x65, 0x64, 0x65, 0x72,
	0x61, 0x74, 0x65, 0x64, 0x2e, 0x76, 0x30, 0x2e, 0x54, 0x65, 0x6e, 0x73, 0x6f, 0x72, 0x46, 0x6c,
	0x6f, 0x77, 0x2e, 0x53, 0x74, 0x72, 0x75, 0x63, 0x74, 0x42, 0x69, 0x6e, 0x64, 0x69, 0x6e, 0x67,
	0x48, 0x00, 0x52, 0x06, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x12, 0x4b, 0x0a, 0x06, 0x74, 0x65,
	0x6e, 0x73, 0x6f, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x31, 0x2e, 0x74, 0x65, 0x6e,
	0x73, 0x6f, 0x72, 0x66, 0x6c, 0x6f, 0x77, 0x5f, 0x66, 0x65, 0x64, 0x65, 0x72, 0x61, 0x74, 0x65,
	0x64, 0x2e, 0x76, 0x30, 0x2e, 0x54, 0x65, 0x6e, 0x73, 0x6f, 0x72, 0x46, 0x6c, 0x6f, 0x77, 0x2e,
	0x54, 0x65, 0x6e, 0x73, 0x6f, 0x72, 0x42, 0x69, 0x6e, 0x64, 0x69, 0x6e, 0x67, 0x48, 0x00, 0x52,
	0x06, 0x74, 0x65, 0x6e, 0x73, 0x6f, 0x72, 0x12, 0x51, 0x0a, 0x08, 0x73, 0x65, 0x71, 0x75, 0x65,
	0x6e, 0x63, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x33, 0x2e, 0x74, 0x65, 0x6e, 0x73,
	0x6f, 0x72, 0x66, 0x6c, 0x6f, 0x77, 0x5f, 0x66, 0x65, 0x64, 0x65, 0x72, 0x61, 0x74, 0x65, 0x64,
	0x2e, 0x76, 0x30, 0x2e, 0x54, 0x65, 0x6e, 0x73, 0x6f, 0x72, 0x46, 0x6c, 0x6f, 0x77, 0x2e, 0x53,
	0x65, 0x71, 0x75, 0x65, 0x6e, 0x63, 0x65, 0x42, 0x69, 0x6e, 0x64, 0x69, 0x6e, 0x67, 0x48, 0x00,
	0x52, 0x08, 0x73, 0x65, 0x71, 0x75, 0x65, 0x6e, 0x63, 0x65, 0x42, 0x09, 0x0a, 0x07, 0x62, 0x69,
	0x6e, 0x64, 0x69, 0x6e, 0x67, 0x1a, 0x56, 0x0a, 0x0d, 0x53, 0x74, 0x72, 0x75, 0x63, 0x74, 0x42,
	0x69, 0x6e, 0x64, 0x69, 0x6e, 0x67, 0x12, 0x45, 0x0a, 0x07, 0x65, 0x6c, 0x65, 0x6d, 0x65, 0x6e,
	0x74, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x2b, 0x2e, 0x74, 0x65, 0x6e, 0x73, 0x6f, 0x72,
	0x66, 0x6c, 0x6f, 0x77, 0x5f, 0x66, 0x65, 0x64, 0x65, 0x72, 0x61, 0x74, 0x65, 0x64, 0x2e, 0x76,
	0x30, 0x2e, 0x54, 0x65, 0x6e, 0x73, 0x6f, 0x72, 0x46, 0x6c, 0x6f, 0x77, 0x2e, 0x42, 0x69, 0x6e,
	0x64, 0x69, 0x6e, 0x67, 0x52, 0x07, 0x65, 0x6c, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x1a, 0x3d, 0x0a,
	0x0d, 0x54, 0x65, 0x6e, 0x73, 0x6f, 0x72, 0x42, 0x69, 0x6e, 0x64, 0x69, 0x6e, 0x67, 0x12, 0x21,
	0x0a, 0x0b, 0x74, 0x65, 0x6e, 0x73, 0x6f, 0x72, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x48, 0x00, 0x52, 0x0a, 0x74, 0x65, 0x6e, 0x73, 0x6f, 0x72, 0x4e, 0x61, 0x6d,
	0x65, 0x42, 0x09, 0x0a, 0x07, 0x62, 0x69, 0x6e, 0x64, 0x69, 0x6e, 0x67, 0x1a, 0x89, 0x01, 0x0a,
	0x0f, 0x53, 0x65, 0x71, 0x75, 0x65, 0x6e, 0x63, 0x65, 0x42, 0x69, 0x6e, 0x64, 0x69, 0x6e, 0x67,
	0x12, 0x30, 0x0a, 0x13, 0x76, 0x61, 0x72, 0x69, 0x61, 0x6e, 0x74, 0x5f, 0x74, 0x65, 0x6e, 0x73,
	0x6f, 0x72, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x48, 0x00, 0x52,
	0x11, 0x76, 0x61, 0x72, 0x69, 0x61, 0x6e, 0x74, 0x54, 0x65, 0x6e, 0x73, 0x6f, 0x72, 0x4e, 0x61,
	0x6d, 0x65, 0x12, 0x33, 0x0a, 0x15, 0x67, 0x72, 0x61, 0x70, 0x68, 0x5f, 0x64, 0x65, 0x66, 0x5f,
	0x74, 0x65, 0x6e, 0x73, 0x6f, 0x72, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x09, 0x48, 0x00, 0x52, 0x12, 0x67, 0x72, 0x61, 0x70, 0x68, 0x44, 0x65, 0x66, 0x54, 0x65, 0x6e,
	0x73, 0x6f, 0x72, 0x4e, 0x61, 0x6d, 0x65, 0x42, 0x09, 0x0a, 0x07, 0x62, 0x69, 0x6e, 0x64, 0x69,
	0x6e, 0x67, 0x4a, 0x04, 0x08, 0x01, 0x10, 0x02, 0x1a, 0x1a, 0x0a, 0x08, 0x43, 0x61, 0x63, 0x68,
	0x65, 0x4b, 0x65, 0x79, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04,
	0x52, 0x02, 0x69, 0x64, 0x22, 0x1d, 0x0a, 0x09, 0x49, 0x6e, 0x74, 0x72, 0x69, 0x6e, 0x73, 0x69,
	0x63, 0x12, 0x10, 0x0a, 0x03, 0x75, 0x72, 0x69, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03,
	0x75, 0x72, 0x69, 0x22, 0x6d, 0x0a, 0x06, 0x4c, 0x61, 0x6d, 0x62, 0x64, 0x61, 0x12, 0x25, 0x0a,
	0x0e, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x65, 0x74, 0x65, 0x72, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x65, 0x74, 0x65, 0x72,
	0x4e, 0x61, 0x6d, 0x65, 0x12, 0x3c, 0x0a, 0x06, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x24, 0x2e, 0x74, 0x65, 0x6e, 0x73, 0x6f, 0x72, 0x66, 0x6c, 0x6f,
	0x77, 0x5f, 0x66, 0x65, 0x64, 0x65, 0x72, 0x61, 0x74, 0x65, 0x64, 0x2e, 0x76, 0x30, 0x2e, 0x43,
	0x6f, 0x6d, 0x70, 0x75, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x06, 0x72, 0x65, 0x73, 0x75,
	0x6c, 0x74, 0x22, 0xda, 0x01, 0x0a, 0x05, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x12, 0x3a, 0x0a, 0x05,
	0x6c, 0x6f, 0x63, 0x61, 0x6c, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x24, 0x2e, 0x74, 0x65,
	0x6e, 0x73, 0x6f, 0x72, 0x66, 0x6c, 0x6f, 0x77, 0x5f, 0x66, 0x65, 0x64, 0x65, 0x72, 0x61, 0x74,
	0x65, 0x64, 0x2e, 0x76, 0x30, 0x2e, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x2e, 0x4c, 0x6f, 0x63, 0x61,
	0x6c, 0x52, 0x05, 0x6c, 0x6f, 0x63, 0x61, 0x6c, 0x12, 0x3c, 0x0a, 0x06, 0x72, 0x65, 0x73, 0x75,
	0x6c, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x24, 0x2e, 0x74, 0x65, 0x6e, 0x73, 0x6f,
	0x72, 0x66, 0x6c, 0x6f, 0x77, 0x5f, 0x66, 0x65, 0x64, 0x65, 0x72, 0x61, 0x74, 0x65, 0x64, 0x2e,
	0x76, 0x30, 0x2e, 0x43, 0x6f, 0x6d, 0x70, 0x75, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x06,
	0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x1a, 0x57, 0x0a, 0x05, 0x4c, 0x6f, 0x63, 0x61, 0x6c, 0x12,
	0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e,
	0x61, 0x6d, 0x65, 0x12, 0x3a, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x24, 0x2e, 0x74, 0x65, 0x6e, 0x73, 0x6f, 0x72, 0x66, 0x6c, 0x6f, 0x77, 0x5f,
	0x66, 0x65, 0x64, 0x65, 0x72, 0x61, 0x74, 0x65, 0x64, 0x2e, 0x76, 0x30, 0x2e, 0x43, 0x6f, 0x6d,
	0x70, 0x75, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x22,
	0x1f, 0x0a, 0x09, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x12, 0x12, 0x0a, 0x04,
	0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65,
	0x22, 0x8a, 0x01, 0x0a, 0x04, 0x43, 0x61, 0x6c, 0x6c, 0x12, 0x40, 0x0a, 0x08, 0x66, 0x75, 0x6e,
	0x63, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x24, 0x2e, 0x74, 0x65,
	0x6e, 0x73, 0x6f, 0x72, 0x66, 0x6c, 0x6f, 0x77, 0x5f, 0x66, 0x65, 0x64, 0x65, 0x72, 0x61, 0x74,
	0x65, 0x64, 0x2e, 0x76, 0x30, 0x2e, 0x43, 0x6f, 0x6d, 0x70, 0x75, 0x74, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x52, 0x08, 0x66, 0x75, 0x6e, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x40, 0x0a, 0x08, 0x61,
	0x72, 0x67, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x24, 0x2e,
	0x74, 0x65, 0x6e, 0x73, 0x6f, 0x72, 0x66, 0x6c, 0x6f, 0x77, 0x5f, 0x66, 0x65, 0x64, 0x65, 0x72,
	0x61, 0x74, 0x65, 0x64, 0x2e, 0x76, 0x30, 0x2e, 0x43, 0x6f, 0x6d, 0x70, 0x75, 0x74, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x52, 0x08, 0x61, 0x72, 0x67, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x22, 0xa6, 0x01,
	0x0a, 0x06, 0x53, 0x74, 0x72, 0x75, 0x63, 0x74, 0x12, 0x41, 0x0a, 0x07, 0x65, 0x6c, 0x65, 0x6d,
	0x65, 0x6e, 0x74, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x27, 0x2e, 0x74, 0x65, 0x6e, 0x73,
	0x6f, 0x72, 0x66, 0x6c, 0x6f, 0x77, 0x5f, 0x66, 0x65, 0x64, 0x65, 0x72, 0x61, 0x74, 0x65, 0x64,
	0x2e, 0x76, 0x30, 0x2e, 0x53, 0x74, 0x72, 0x75, 0x63, 0x74, 0x2e, 0x45, 0x6c, 0x65, 0x6d, 0x65,
	0x6e, 0x74, 0x52, 0x07, 0x65, 0x6c, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x1a, 0x59, 0x0a, 0x07, 0x45,
	0x6c, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x3a, 0x0a, 0x05, 0x76, 0x61,
	0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x24, 0x2e, 0x74, 0x65, 0x6e, 0x73,
	0x6f, 0x72, 0x66, 0x6c, 0x6f, 0x77, 0x5f, 0x66, 0x65, 0x64, 0x65, 0x72, 0x61, 0x74, 0x65, 0x64,
	0x2e, 0x76, 0x30, 0x2e, 0x43, 0x6f, 0x6d, 0x70, 0x75, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52,
	0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x22, 0x5f, 0x0a, 0x09, 0x53, 0x65, 0x6c, 0x65, 0x63, 0x74,
	0x69, 0x6f, 0x6e, 0x12, 0x3c, 0x0a, 0x06, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x24, 0x2e, 0x74, 0x65, 0x6e, 0x73, 0x6f, 0x72, 0x66, 0x6c, 0x6f, 0x77,
	0x5f, 0x66, 0x65, 0x64, 0x65, 0x72, 0x61, 0x74, 0x65, 0x64, 0x2e, 0x76, 0x30, 0x2e, 0x43, 0x6f,
	0x6d, 0x70, 0x75, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x06, 0x73, 0x6f, 0x75, 0x72, 0x63,
	0x65, 0x12, 0x14, 0x0a, 0x05, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05,
	0x52, 0x05, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x22, 0x22, 0x0a, 0x04, 0x44, 0x61, 0x74, 0x61, 0x12,
	0x12, 0x0a, 0x03, 0x75, 0x72, 0x69, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x48, 0x00, 0x52, 0x03,
	0x75, 0x72, 0x69, 0x42, 0x06, 0x0a, 0x04, 0x64, 0x61, 0x74, 0x61, 0x22, 0xe4, 0x03, 0x0a, 0x03,
	0x58, 0x6c, 0x61, 0x12, 0x33, 0x0a, 0x0a, 0x68, 0x6c, 0x6f, 0x5f, 0x6d, 0x6f, 0x64, 0x75, 0x6c,
	0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x41, 0x6e, 0x79, 0x52, 0x09, 0x68,
	0x6c, 0x6f, 0x4d, 0x6f, 0x64, 0x75, 0x6c, 0x65, 0x12, 0x42, 0x0a, 0x09, 0x70, 0x61, 0x72, 0x61,
	0x6d, 0x65, 0x74, 0x65, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x24, 0x2e, 0x74, 0x65,
	0x6e, 0x73, 0x6f, 0x72, 0x66, 0x6c, 0x6f, 0x77, 0x5f, 0x66, 0x65, 0x64, 0x65, 0x72, 0x61, 0x74,
	0x65, 0x64, 0x2e, 0x76, 0x30, 0x2e, 0x58, 0x6c, 0x61, 0x2e, 0x42, 0x69, 0x6e, 0x64, 0x69, 0x6e,
	0x67, 0x52, 0x09, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x65, 0x74, 0x65, 0x72, 0x12, 0x3c, 0x0a, 0x06,
	0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x24, 0x2e, 0x74,
	0x65, 0x6e, 0x73, 0x6f, 0x72, 0x66, 0x6c, 0x6f, 0x77, 0x5f, 0x66, 0x65, 0x64, 0x65, 0x72, 0x61,
	0x74, 0x65, 0x64, 0x2e, 0x76, 0x30, 0x2e, 0x58, 0x6c, 0x61, 0x2e, 0x42, 0x69, 0x6e, 0x64, 0x69,
	0x6e, 0x67, 0x52, 0x06, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x1a, 0xa0, 0x01, 0x0a, 0x07, 0x42,
	0x69, 0x6e, 0x64, 0x69, 0x6e, 0x67, 0x12, 0x44, 0x0a, 0x06, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2a, 0x2e, 0x74, 0x65, 0x6e, 0x73, 0x6f, 0x72, 0x66,
	0x6c, 0x6f, 0x77, 0x5f, 0x66, 0x65, 0x64, 0x65, 0x72, 0x61, 0x74, 0x65, 0x64, 0x2e, 0x76, 0x30,
	0x2e, 0x58, 0x6c, 0x61, 0x2e, 0x53, 0x74, 0x72, 0x75, 0x63, 0x74, 0x42, 0x69, 0x6e, 0x64, 0x69,
	0x6e, 0x67, 0x48, 0x00, 0x52, 0x06, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x12, 0x44, 0x0a, 0x06,
	0x74, 0x65, 0x6e, 0x73, 0x6f, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2a, 0x2e, 0x74,
	0x65, 0x6e, 0x73, 0x6f, 0x72, 0x66, 0x6c, 0x6f, 0x77, 0x5f, 0x66, 0x65, 0x64, 0x65, 0x72, 0x61,
	0x74, 0x65, 0x64, 0x2e, 0x76, 0x30, 0x2e, 0x58, 0x6c, 0x61, 0x2e, 0x54, 0x65, 0x6e, 0x73, 0x6f,
	0x72, 0x42, 0x69, 0x6e, 0x64, 0x69, 0x6e, 0x67, 0x48, 0x00, 0x52, 0x06, 0x74, 0x65, 0x6e, 0x73,
	0x6f, 0x72, 0x42, 0x09, 0x0a, 0x07, 0x62, 0x69, 0x6e, 0x64, 0x69, 0x6e, 0x67, 0x1a, 0x4f, 0x0a,
	0x0d, 0x53, 0x74, 0x72, 0x75, 0x63, 0x74, 0x42, 0x69, 0x6e, 0x64, 0x69, 0x6e, 0x67, 0x12, 0x3e,
	0x0a, 0x07, 0x65, 0x6c, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x24, 0x2e, 0x74, 0x65, 0x6e, 0x73, 0x6f, 0x72, 0x66, 0x6c, 0x6f, 0x77, 0x5f, 0x66, 0x65, 0x64,
	0x65, 0x72, 0x61, 0x74, 0x65, 0x64, 0x2e, 0x76, 0x30, 0x2e, 0x58, 0x6c, 0x61, 0x2e, 0x42, 0x69,
	0x6e, 0x64, 0x69, 0x6e, 0x67, 0x52, 0x07, 0x65, 0x6c, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x1a, 0x32,
	0x0a, 0x0d, 0x54, 0x65, 0x6e, 0x73, 0x6f, 0x72, 0x42, 0x69, 0x6e, 0x64, 0x69, 0x6e, 0x67, 0x12,
	0x16, 0x0a, 0x05, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x48, 0x00,
	0x52, 0x05, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x42, 0x09, 0x0a, 0x07, 0x62, 0x69, 0x6e, 0x64, 0x69,
	0x6e, 0x67, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_tensorflow_federated_proto_v0_computation_proto_rawDescOnce sync.Once
	file_tensorflow_federated_proto_v0_computation_proto_rawDescData = file_tensorflow_federated_proto_v0_computation_proto_rawDesc
)

func file_tensorflow_federated_proto_v0_computation_proto_rawDescGZIP() []byte {
	file_tensorflow_federated_proto_v0_computation_proto_rawDescOnce.Do(func() {
		file_tensorflow_federated_proto_v0_computation_proto_rawDescData = protoimpl.X.CompressGZIP(file_tensorflow_federated_proto_v0_computation_proto_rawDescData)
	})
	return file_tensorflow_federated_proto_v0_computation_proto_rawDescData
}

var file_tensorflow_federated_proto_v0_computation_proto_enumTypes = make([]protoimpl.EnumInfo, 1)
var file_tensorflow_federated_proto_v0_computation_proto_msgTypes = make([]protoimpl.MessageInfo, 33)
var file_tensorflow_federated_proto_v0_computation_proto_goTypes = []interface{}{
	(TensorType_DataType)(0),           // 0: tensorflow_federated.v0.TensorType.DataType
	(*Computation)(nil),                // 1: tensorflow_federated.v0.Computation
	(*Type)(nil),                       // 2: tensorflow_federated.v0.Type
	(*FunctionType)(nil),               // 3: tensorflow_federated.v0.FunctionType
	(*StructType)(nil),                 // 4: tensorflow_federated.v0.StructType
	(*SequenceType)(nil),               // 5: tensorflow_federated.v0.SequenceType
	(*TensorType)(nil),                 // 6: tensorflow_federated.v0.TensorType
	(*AbstractType)(nil),               // 7: tensorflow_federated.v0.AbstractType
	(*PlacementSpec)(nil),              // 8: tensorflow_federated.v0.PlacementSpec
	(*PlacementLabel)(nil),             // 9: tensorflow_federated.v0.PlacementLabel
	(*Placement)(nil),                  // 10: tensorflow_federated.v0.Placement
	(*FederatedType)(nil),              // 11: tensorflow_federated.v0.FederatedType
	(*PlacementType)(nil),              // 12: tensorflow_federated.v0.PlacementType
	(*TensorFlow)(nil),                 // 13: tensorflow_federated.v0.TensorFlow
	(*Intrinsic)(nil),                  // 14: tensorflow_federated.v0.Intrinsic
	(*Lambda)(nil),                     // 15: tensorflow_federated.v0.Lambda
	(*Block)(nil),                      // 16: tensorflow_federated.v0.Block
	(*Reference)(nil),                  // 17: tensorflow_federated.v0.Reference
	(*Call)(nil),                       // 18: tensorflow_federated.v0.Call
	(*Struct)(nil),                     // 19: tensorflow_federated.v0.Struct
	(*Selection)(nil),                  // 20: tensorflow_federated.v0.Selection
	(*Data)(nil),                       // 21: tensorflow_federated.v0.Data
	(*Xla)(nil),                        // 22: tensorflow_federated.v0.Xla
	(*StructType_Element)(nil),         // 23: tensorflow_federated.v0.StructType.Element
	(*TensorFlow_Binding)(nil),         // 24: tensorflow_federated.v0.TensorFlow.Binding
	(*TensorFlow_StructBinding)(nil),   // 25: tensorflow_federated.v0.TensorFlow.StructBinding
	(*TensorFlow_TensorBinding)(nil),   // 26: tensorflow_federated.v0.TensorFlow.TensorBinding
	(*TensorFlow_SequenceBinding)(nil), // 27: tensorflow_federated.v0.TensorFlow.SequenceBinding
	(*TensorFlow_CacheKey)(nil),        // 28: tensorflow_federated.v0.TensorFlow.CacheKey
	(*Block_Local)(nil),                // 29: tensorflow_federated.v0.Block.Local
	(*Struct_Element)(nil),             // 30: tensorflow_federated.v0.Struct.Element
	(*Xla_Binding)(nil),                // 31: tensorflow_federated.v0.Xla.Binding
	(*Xla_StructBinding)(nil),          // 32: tensorflow_federated.v0.Xla.StructBinding
	(*Xla_TensorBinding)(nil),          // 33: tensorflow_federated.v0.Xla.TensorBinding
	(*anypb.Any)(nil),                  // 34: google.protobuf.Any
}
var file_tensorflow_federated_proto_v0_computation_proto_depIdxs = []int32{
	2,  // 0: tensorflow_federated.v0.Computation.type:type_name -> tensorflow_federated.v0.Type
	13, // 1: tensorflow_federated.v0.Computation.tensorflow:type_name -> tensorflow_federated.v0.TensorFlow
	14, // 2: tensorflow_federated.v0.Computation.intrinsic:type_name -> tensorflow_federated.v0.Intrinsic
	21, // 3: tensorflow_federated.v0.Computation.data:type_name -> tensorflow_federated.v0.Data
	15, // 4: tensorflow_federated.v0.Computation.lambda:type_name -> tensorflow_federated.v0.Lambda
	16, // 5: tensorflow_federated.v0.Computation.block:type_name -> tensorflow_federated.v0.Block
	17, // 6: tensorflow_federated.v0.Computation.reference:type_name -> tensorflow_federated.v0.Reference
	18, // 7: tensorflow_federated.v0.Computation.call:type_name -> tensorflow_federated.v0.Call
	19, // 8: tensorflow_federated.v0.Computation.struct:type_name -> tensorflow_federated.v0.Struct
	20, // 9: tensorflow_federated.v0.Computation.selection:type_name -> tensorflow_federated.v0.Selection
	10, // 10: tensorflow_federated.v0.Computation.placement:type_name -> tensorflow_federated.v0.Placement
	22, // 11: tensorflow_federated.v0.Computation.xla:type_name -> tensorflow_federated.v0.Xla
	3,  // 12: tensorflow_federated.v0.Type.function:type_name -> tensorflow_federated.v0.FunctionType
	4,  // 13: tensorflow_federated.v0.Type.struct:type_name -> tensorflow_federated.v0.StructType
	5,  // 14: tensorflow_federated.v0.Type.sequence:type_name -> tensorflow_federated.v0.SequenceType
	6,  // 15: tensorflow_federated.v0.Type.tensor:type_name -> tensorflow_federated.v0.TensorType
	7,  // 16: tensorflow_federated.v0.Type.abstract:type_name -> tensorflow_federated.v0.AbstractType
	12, // 17: tensorflow_federated.v0.Type.placement:type_name -> tensorflow_federated.v0.PlacementType
	11, // 18: tensorflow_federated.v0.Type.federated:type_name -> tensorflow_federated.v0.FederatedType
	2,  // 19: tensorflow_federated.v0.FunctionType.parameter:type_name -> tensorflow_federated.v0.Type
	2,  // 20: tensorflow_federated.v0.FunctionType.result:type_name -> tensorflow_federated.v0.Type
	23, // 21: tensorflow_federated.v0.StructType.element:type_name -> tensorflow_federated.v0.StructType.Element
	2,  // 22: tensorflow_federated.v0.SequenceType.element:type_name -> tensorflow_federated.v0.Type
	0,  // 23: tensorflow_federated.v0.TensorType.dtype:type_name -> tensorflow_federated.v0.TensorType.DataType
	9,  // 24: tensorflow_federated.v0.PlacementSpec.label:type_name -> tensorflow_federated.v0.PlacementLabel
	10, // 25: tensorflow_federated.v0.PlacementSpec.value:type_name -> tensorflow_federated.v0.Placement
	8,  // 26: tensorflow_federated.v0.FederatedType.placement:type_name -> tensorflow_federated.v0.PlacementSpec
	2,  // 27: tensorflow_federated.v0.FederatedType.member:type_name -> tensorflow_federated.v0.Type
	9,  // 28: tensorflow_federated.v0.PlacementType.instance_label:type_name -> tensorflow_federated.v0.PlacementLabel
	34, // 29: tensorflow_federated.v0.TensorFlow.graph_def:type_name -> google.protobuf.Any
	24, // 30: tensorflow_federated.v0.TensorFlow.parameter:type_name -> tensorflow_federated.v0.TensorFlow.Binding
	24, // 31: tensorflow_federated.v0.TensorFlow.result:type_name -> tensorflow_federated.v0.TensorFlow.Binding
	28, // 32: tensorflow_federated.v0.TensorFlow.cache_key:type_name -> tensorflow_federated.v0.TensorFlow.CacheKey
	1,  // 33: tensorflow_federated.v0.Lambda.result:type_name -> tensorflow_federated.v0.Computation
	29, // 34: tensorflow_federated.v0.Block.local:type_name -> tensorflow_federated.v0.Block.Local
	1,  // 35: tensorflow_federated.v0.Block.result:type_name -> tensorflow_federated.v0.Computation
	1,  // 36: tensorflow_federated.v0.Call.function:type_name -> tensorflow_federated.v0.Computation
	1,  // 37: tensorflow_federated.v0.Call.argument:type_name -> tensorflow_federated.v0.Computation
	30, // 38: tensorflow_federated.v0.Struct.element:type_name -> tensorflow_federated.v0.Struct.Element
	1,  // 39: tensorflow_federated.v0.Selection.source:type_name -> tensorflow_federated.v0.Computation
	34, // 40: tensorflow_federated.v0.Xla.hlo_module:type_name -> google.protobuf.Any
	31, // 41: tensorflow_federated.v0.Xla.parameter:type_name -> tensorflow_federated.v0.Xla.Binding
	31, // 42: tensorflow_federated.v0.Xla.result:type_name -> tensorflow_federated.v0.Xla.Binding
	2,  // 43: tensorflow_federated.v0.StructType.Element.value:type_name -> tensorflow_federated.v0.Type
	25, // 44: tensorflow_federated.v0.TensorFlow.Binding.struct:type_name -> tensorflow_federated.v0.TensorFlow.StructBinding
	26, // 45: tensorflow_federated.v0.TensorFlow.Binding.tensor:type_name -> tensorflow_federated.v0.TensorFlow.TensorBinding
	27, // 46: tensorflow_federated.v0.TensorFlow.Binding.sequence:type_name -> tensorflow_federated.v0.TensorFlow.SequenceBinding
	24, // 47: tensorflow_federated.v0.TensorFlow.StructBinding.element:type_name -> tensorflow_federated.v0.TensorFlow.Binding
	1,  // 48: tensorflow_federated.v0.Block.Local.value:type_name -> tensorflow_federated.v0.Computation
	1,  // 49: tensorflow_federated.v0.Struct.Element.value:type_name -> tensorflow_federated.v0.Computation
	32, // 50: tensorflow_federated.v0.Xla.Binding.struct:type_name -> tensorflow_federated.v0.Xla.StructBinding
	33, // 51: tensorflow_federated.v0.Xla.Binding.tensor:type_name -> tensorflow_federated.v0.Xla.TensorBinding
	31, // 52: tensorflow_federated.v0.Xla.StructBinding.element:type_name -> tensorflow_federated.v0.Xla.Binding
	53, // [53:53] is the sub-list for method output_type
	53, // [53:53] is the sub-list for method input_type
	53, // [53:53] is the sub-list for extension type_name
	53, // [53:53] is the sub-list for extension extendee
	0,  // [0:53] is the sub-list for field type_name
}

func init() { file_tensorflow_federated_proto_v0_computation_proto_init() }
func file_tensorflow_federated_proto_v0_computation_proto_init() {
	if File_tensorflow_federated_proto_v0_computation_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_tensorflow_federated_proto_v0_computation_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Computation); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_tensorflow_federated_proto_v0_computation_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Type); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_tensorflow_federated_proto_v0_computation_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FunctionType); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_tensorflow_federated_proto_v0_computation_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*StructType); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_tensorflow_federated_proto_v0_computation_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SequenceType); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_tensorflow_federated_proto_v0_computation_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TensorType); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_tensorflow_federated_proto_v0_computation_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AbstractType); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_tensorflow_federated_proto_v0_computation_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PlacementSpec); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_tensorflow_federated_proto_v0_computation_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PlacementLabel); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_tensorflow_federated_proto_v0_computation_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Placement); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_tensorflow_federated_proto_v0_computation_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FederatedType); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_tensorflow_federated_proto_v0_computation_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PlacementType); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_tensorflow_federated_proto_v0_computation_proto_msgTypes[12].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TensorFlow); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_tensorflow_federated_proto_v0_computation_proto_msgTypes[13].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Intrinsic); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_tensorflow_federated_proto_v0_computation_proto_msgTypes[14].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Lambda); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_tensorflow_federated_proto_v0_computation_proto_msgTypes[15].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Block); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_tensorflow_federated_proto_v0_computation_proto_msgTypes[16].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Reference); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_tensorflow_federated_proto_v0_computation_proto_msgTypes[17].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Call); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_tensorflow_federated_proto_v0_computation_proto_msgTypes[18].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Struct); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_tensorflow_federated_proto_v0_computation_proto_msgTypes[19].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Selection); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_tensorflow_federated_proto_v0_computation_proto_msgTypes[20].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Data); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_tensorflow_federated_proto_v0_computation_proto_msgTypes[21].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Xla); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_tensorflow_federated_proto_v0_computation_proto_msgTypes[22].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*StructType_Element); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_tensorflow_federated_proto_v0_computation_proto_msgTypes[23].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TensorFlow_Binding); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_tensorflow_federated_proto_v0_computation_proto_msgTypes[24].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TensorFlow_StructBinding); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_tensorflow_federated_proto_v0_computation_proto_msgTypes[25].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TensorFlow_TensorBinding); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_tensorflow_federated_proto_v0_computation_proto_msgTypes[26].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TensorFlow_SequenceBinding); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_tensorflow_federated_proto_v0_computation_proto_msgTypes[27].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TensorFlow_CacheKey); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_tensorflow_federated_proto_v0_computation_proto_msgTypes[28].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Block_Local); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_tensorflow_federated_proto_v0_computation_proto_msgTypes[29].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Struct_Element); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_tensorflow_federated_proto_v0_computation_proto_msgTypes[30].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Xla_Binding); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_tensorflow_federated_proto_v0_computation_proto_msgTypes[31].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Xla_StructBinding); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_tensorflow_federated_proto_v0_computation_proto_msgTypes[32].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Xla_TensorBinding); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	file_tensorflow_federated_proto_v0_computation_proto_msgTypes[0].OneofWrappers = []interface{}{
		(*Computation_Tensorflow)(nil),
		(*Computation_Intrinsic)(nil),
		(*Computation_Data)(nil),
		(*Computation_Lambda)(nil),
		(*Computation_Block)(nil),
		(*Computation_Reference)(nil),
		(*Computation_Call)(nil),
		(*Computation_Struct)(nil),
		(*Computation_Selection)(nil),
		(*Computation_Placement)(nil),
		(*Computation_Xla)(nil),
	}
	file_tensorflow_federated_proto_v0_computation_proto_msgTypes[1].OneofWrappers = []interface{}{
		(*Type_Function)(nil),
		(*Type_Struct)(nil),
		(*Type_Sequence)(nil),
		(*Type_Tensor)(nil),
		(*Type_Abstract)(nil),
		(*Type_Placement)(nil),
		(*Type_Federated)(nil),
	}
	file_tensorflow_federated_proto_v0_computation_proto_msgTypes[7].OneofWrappers = []interface{}{
		(*PlacementSpec_Label)(nil),
		(*PlacementSpec_Value)(nil),
	}
	file_tensorflow_federated_proto_v0_computation_proto_msgTypes[20].OneofWrappers = []interface{}{
		(*Data_Uri)(nil),
	}
	file_tensorflow_federated_proto_v0_computation_proto_msgTypes[23].OneofWrappers = []interface{}{
		(*TensorFlow_Binding_Struct)(nil),
		(*TensorFlow_Binding_Tensor)(nil),
		(*TensorFlow_Binding_Sequence)(nil),
	}
	file_tensorflow_federated_proto_v0_computation_proto_msgTypes[25].OneofWrappers = []interface{}{
		(*TensorFlow_TensorBinding_TensorName)(nil),
	}
	file_tensorflow_federated_proto_v0_computation_proto_msgTypes[26].OneofWrappers = []interface{}{
		(*TensorFlow_SequenceBinding_VariantTensorName)(nil),
		(*TensorFlow_SequenceBinding_GraphDefTensorName)(nil),
	}
	file_tensorflow_federated_proto_v0_computation_proto_msgTypes[30].OneofWrappers = []interface{}{
		(*Xla_Binding_Struct)(nil),
		(*Xla_Binding_Tensor)(nil),
	}
	file_tensorflow_federated_proto_v0_computation_proto_msgTypes[32].OneofWrappers = []interface{}{
		(*Xla_TensorBinding_Index)(nil),
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_tensorflow_federated_proto_v0_computation_proto_rawDesc,
			NumEnums:      1,
			NumMessages:   33,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_tensorflow_federated_proto_v0_computation_proto_goTypes,
		DependencyIndexes: file_tensorflow_federated_proto_v0_computation_proto_depIdxs,
		EnumInfos:         file_tensorflow_federated_proto_v0_computation_proto_enumTypes,
		MessageInfos:      file_tensorflow_federated_proto_v0_computation_proto_msgTypes,
	}.Build()
	File_tensorflow_federated_proto_v0_computation_proto = out.File
	file_tensorflow_federated_proto_v0_computation_proto_rawDesc = nil
	file_tensorflow_federated_proto_v0_computation_proto_goTypes = nil
	file_tensorflow_federated_proto_v0_computation_proto_depIdxs = nil
}
